create_markdown
default.adapr.setup
git2r::config()[["global"]]$user
git2r::config()[["global"]]
git2r::config()[["global"]]$name
git2r::config()[["global"]]$user.name
git2r::config()[["global"]]$user.email
library(tableone)
library(coefplot)
coefplot.lm(modelfit.Rdata[["mpg"]])
"adaprTest" %in% get_orchard()$project.id
get_adapr_options()$project.path
library(adapr)
remove.project("adaprTest")
loadAdaprTest()
remove.project("adaprTest")
loadAdaprTest <- function(){
# Loads an example project
if("adaprTest" %in% get_orchard()$project.id){
print("adaprTest already loaded try remove.project(\"adaprTest\")")
return(1)
}else{
projectLocation <- system.file("adaprTest.zip",package="adapr")
file.copy(projectLocation,get_adapr_options()$project.path)
newLocation <- file.path(get_adapr_options()$project.path,"adaprTest.zip")
untils <- unzip(newLocation)
file.remove(newLocation)
relocate.project("adaprTest")
}
return(0)
}# END: loadAdaprTest
loadAdaprTest()
set.project("adaprTest")
graph.project()
get.project.path("adaprTest")
remove.project("adaprTest")
loadAdaprTest()
get_orchard("ad")
set.project("adaprTest")
set.project("adaprTest",1)
graph.project()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
remove.project("adaprTest")
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
? unzipe
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
?basename()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
set.project("adaprTest")
graph.project()
sync.project()
graph.project()
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
show.project()
parallelSync.project()
parallelSync.project(n.cores = 3)
loadAdaprTest()
graph.project()
parallelSync.project()
parallelSync.project(n.cores = 3)
loadAdaprTest()
parallelSync.project(n.cores = 3)
graph.project()
library(adapr)
set.project("adaprTest")
set.project("adaprTest",1)
graph.project()
graph.project()
sync.project()
graph.project()
Load.branch
sync.project()
sync.project
source_sync_si_load
Harvest.trees
get.library <- function(project.id = get.project()){
programs <- list.programs(project.id)
path <- get.project.path(project.id)
packageInfo <- plyr::ddply(programs,"source.file",function(program){
packages <- file.path(path,project.directory.tree$support,gsub("\\.","_",program$source.file[1]),"package_info.csv")
out <- utils::read.csv(packages)
return(out)
})
return(packageInfo)
}
get.library()
library(adapr)
get.library()
get.project)()
get.project()
View(list.projects())
get.sourceInfo <- function(){
return(options()$adaprScriptInfo)
}
get.sourceInfo()
library(adapr)
get.scriptInfo()
get.sourceInfo()
libraryList <- get.library()
libraryList
get.project()
? withr
? XML
librarydf <- get.library()
librarydf
set.project(Escaname
_402)
set.project("Escaname_402")
get.library()
librarydf <- get.library()
librarydf <- librarydf[order(-librarydf$version),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
order(-as.numeric(as.character(librarydf$version)))
librarydf <- get.library()
librarydf$version
librarydf <- get.library()
librarydf <- librarydf[order(as.character(librarydf$version)),]
librarydf
?order
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=FALSE),]
librarydf
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf
dim(librarydf)
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
dim(librarydf)
librarydf <- subset(librarydf,!duplicated(librarydf$package))
? install.packages
View(librarydf)
get.project()
show.project()
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf
install.packages()
installed.packages()
installed <- install.packages()
installed <- utils::installed.packages()
head(installed)
class(installed)
installed <- data.frame(utils::installed.packages())
head(installed)
names(installed)
x <- librarydf[12,]
x
installcheck <- subset(installed,Package==x$package)
librarydf$Package <- as.character(librarydf$package)
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed
installcheck <- subset(installed,as.character(Package==x$package))
installcheck <- subset(installed,Package==x$Package[1])
installcheck
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installcheck <- subset(installed,Package==x$Package[1])
installcheck
x <- librarydf[12,]
x$Package[1]
installed$Package
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
x$Package[1]
installcheck <- subset(installed,Package==x$Package[1])
subset(installed,Package==x$Package[1])
x$version[1]
installcheck$Version[1]
installcheck$Version[1] == x$version[1]
librarydf$Version <- as.character(librarydf$version)
x <- librarydf[12,]
versionMatch <- installcheck$Version[1] == x$version[1]
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed$Version <- as.character(installed$Version)
librarydf$Version <- as.character(librarydf$version)
installcheck$Version[1] == x$Version[1]
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installed <- nrow(installcheck)!=0
installcheck <- subset(installed,Package==x$Package[1])
installed <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
data.frame(installed=installedTF,versionMatch)
})
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed$Version <- as.character(installed$Version)
librarydf$Version <- as.character(librarydf$version)
x <- librarydf[12,]
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,installed$Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
data.frame(installed=installedTF,versionMatch)
})
installout
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,installed$Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
return(data.frame(installed=installedTF,version=x$Version[1],versionMatch,repos=x$source))
})
installout
table(installout$repos)
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType <- ifelse(grepl("^cran",tolower(installout$repos)),"cran",installout$repoType)
installout$repoType
subset(installout,is.na(repoType))
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType <- ifelse(grepl("^cran",tolower(installout$repos)),"cran",installout$repoType)
installout$repoType <- ifelse(grepl("^local",tolower(installout$repos)),"local",installout$repoType)
installout$repoType
?devtools::install_cran()
?install_cran()
install_version("survival")
library(devtools)
install_version("survival")
source("http://bioconductor.org/biocLite.R")
tempfcn <- get("biocLite")
? biocLite
load.install.library.file
get.library
temp <- get.library()
head(temp)
source('~/.active-rstudio-document')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
data.frame(one=NULL)
data.frame(one=NULL)$one[1]
NULL | TRUE
rownames(installed.packages()
)
packageVersion("XML")
packageVersion("XML")=="3.98.1.9"
? install.versions
packageVersion("sfa")
checkVersion <- function(package0,version0,versionCheck){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- packageVersion(package0)
}
return(packageTRUE)
}
checkVersion <- function(package0,version0="",versionCheck=FALSE){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- packageVersion(package0)
}
return(packageTRUE)
}
checkVersion("ggplot2")
checkVersion("ggplot2","asdf",TRUE)
temp <- checkVersion("ggplot2","asdf",TRUE)
temp
checkVersion <- function(package0,version0="",versionCheck=FALSE){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- packageVersion(package0)==version0
}
return(packageTRUE)
}
temp <- checkVersion("ggplot2","asdf",TRUE)
temp <- packageVersion(package0)
temp <- packageVersion("ggplot2")
temp
class(temp)
as.character(temp)
checkVersion <- function(package0,version0="",versionCheck=FALSE){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- as.character(packageVersion(package0))==version0
}
return(packageTRUE)
}
temp <- checkVersion("ggplot2","asdf",TRUE)
temp
temp <- checkVersion("ggplot2s","asdf",FALSE)
tmep
temp
checkVersion("ggplot2","asdf",FALSE)
checkVersion("ggplot2","2.2.1",FALSE)
checkVersion("ggplot2","2.2.1",TRUE)
install <- function(package,version=NULL,installVersion=FALSE,lib=.libPaths()[1],repos='cran',show.available=FALSE,...){
if(!('versions' %in% installed.packages()[,'Package'])){
install.packages('versions')
}
if(repos=='cran'){
# Show available versions of the package
if(show.available){
print(versions::available.versions(package)[[package]])
}
# Install package no version specified (default is to use the most current version)
if(!installVersion){
utils::install.packages(package)
#versions::install.versions(package, versions::available.versions(package)[[package]][1,1], lib=lib)
}
# Install package with version specified
else if(installVersion){
versions::install.versions(package, version, lib=lib,...)
}
if(package %in% installed.packages()[,'Package']){
cat(paste0("Package '",package,"' successfully installed!\n"))
}else{
cat(paste0("Installation failed!\n"))
}
}
# Install bioconductor package
else if(repos=="bioc"){
if(!exists("biocLite")){
source("http://bioconductor.org/biocLite.R")
}
tempfcn <- get("biocLite")
tempfcn(package,ask=TRUE)
cat(paste0("Package ",package," successfully installed!\n"))
}else{
cat(paste0("Install error: Failed for package ",package))
}
}
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
? install.packages
? installed.packages
get.library()
source('~/Documents/Projects/adapr/R/list_files.R')
get.library()
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
library(adapr)
get.library()
get.library <- function(project.id = get.project()){
programs <- list.programs(project.id)
path <- get.project.path(project.id)
packageInfo <- plyr::ddply(programs,"source.file",function(program){
results.dir <- file.path(path,adapr::project.directory.tree$results,program$source.file[1])
packages <- file.path(results.dir,paste0("Session_info_",gsub("\\.","_",program$source.file[1]),".RObj"))
#print(packages)
load(file=packages)
out <- obj$packages
return(out)
})
packageInfo$repos <- tolower(substring(packageInfo$source,1,4))
# packageInfo <- subset(packageInfo,!duplicated(package))
return(packageInfo)
}
get.library()
set.project("Weiner_SNP")
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
dim(get.library())
? packageVersion
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages()
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
checkVersion <- function(package0,version0="",versionCheck=FALSE,lib=.libPaths()[1]){
installed <- installed.packages(lib)
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- as.character(packageVersion(package0,lib))==version0
}
return(packageTRUE)
}
checkVersion("Hmisc")
checkVersion("Hmisc","4.0-3",TRUE)
package_version("Hmisc")
packageVersion("Hmisc")
install.packages("Hmisc")
packageVersion("Hmisc")
as.character(packageVersion("Hmisc"))
get.library
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
packageVersion(Formula)
packageVersion("Formula")
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
temp <- install_multiple_packages(versionCheck = TRUE)
subset(temp,temp$success==FALSE)
versions::install.versions(git2r, version="0.18.0")
versions::install.versions("git2r", version="0.18.0")
temp <- install_multiple_packages(versionCheck = TRUE)
install("git2r","0.18.0",TRUE)
checkVersion <- function(package0,version0="",versionCheck=FALSE,lib=.libPaths()[1]){
installed <- installed.packages(lib)
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- gsub("\\-","\\.",as.character(packageVersion(package0,lib)))==gsub("\\-","\\.",version0)
}
return(packageTRUE)
}
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library()
install.library(versionCheck = TRUE
)
install("Formula","1.2-1",installVersion = TRUE)
install.library()
install.library(versionCheck = TRUE)
? install.packages
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library(versionCheck = TRUE)
temp <- install.library(versionCheck = TRUE)
subset(temp,package=="tableone")
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck = TRUE)
temp
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library(versionCheck=TREU)
install.library(versionCheck=TRUE)
temp <- install.library(versionCheck=TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck=TRUE)
temp$success
library(adapr)
?packageVersion()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
library(adapr)
? packageVersion
? packageVersion
library(adapr)
library(adapr)
library(adapr)
