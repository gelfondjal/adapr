count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts("plot")
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id",function(x){
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts("plot")
searchScripts("plot",listProjects()$project.id)
searchScripts("plot",listProjects()$project)
listProjects()$project
temp <- listProjects()
temp
searchScripts("plot",listProjects()$project.id)
project.id <- listProjects()$project.id
projects <- data.frame(project.id=unique(project.id))
projects
count.dat <- plyr::ddply(projects,"project.id",function(x){
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
head(projects)
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id",function(x){
try({
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
})
return(count.dat)
}
searchScripts("plot",listProjects()$project.id)
data.frame()
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id",function(x){
count.dat <- data.frame()
try({
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
})
return(count.dat)
}
searchScripts("plot",listProjects()$project.id)
searchScripts("plot",listProjects()$project.id[2:5])
searchScripts("plot",listProjects()$project.id)
searchScripts("demographics",listProjects()$project.id)
searchScripts("demographicsasdfasdfasfsadfds",listProjects()$project.id)
warnings()
formalArgs(viewData)
? formalArgs
viewData <- function(df){
fileToWrite <- file.path(tempdir(),"adaprOverwrite.csv")
print(quote(df))
utils::write.csv(df,fileToWrite,row.names=FALSE)
utils::browseURL(fileToWrite)
}
viewData(listProjects())
source('~/Documents/Projects/adapr/R/list_files.R')
viewData(listProjects())
source('~/Documents/Projects/adapr/R/list_files.R')
viewData(listProjects())
viewData(listProjects())
viewData(listProjects())
viewData(listProjects(),TRUE)
source('~/Documents/Projects/adapr/R/list_files.R')
viewData(listProjects(),TRUE)
viewData(listProjects(),TRUE)
viewData(listProjects(),FALSE)
viewData(listProjects(),TRUE)
viewData(listProjects(),TRUE)
importData
file.choose()
? file.choose
choose.dir
performanceTable <- loadFlex("ttsc_performanceTable.rda")
names(performanceTable)[names(performanceTable)=="Pval"] <- "P-value"
getProjectPath()
project.directory.tree$results
showResults <- function(project.id=getProject(),rscript=getSourceInfo()$file$file){
si <- pullSourceInfo(project.id)
if(is.null(rscript)){
utils::browseURL(file.path(getProjectPath(project.id),project.directory.tree$results))
}else{
resultdir <- file.path(getProjectPath(project.id),project.directory.tree$results,rscript)
utils::browseURL(resultdir)
}
}
library(adapr)
library(adapr)
getSourceInfo()
getSourceInfo
options(adaprScriptInfo=NULL)
options()$adaprScriptInfo
getSourceInfo()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? relocateProject
library(adapr)
source('~/Documents/Projects/adapr/R/setProject.R')
setProject("Escan")
setProject("Escan")
setProject("Escan")
source('~/Documents/Projects/adapr/R/setProject.R')
setProject("Escan")
library(adapr)
? adist
library(adapr)
importProject(,import.by.Rscript = TRUE)
graphProjec()
graphProject(testSync = FALSE)
setProject(project.id)
plotter <- graphProject(testSync=FALSE)
print(plotter)
importProject(import.by.Rscript = TRUE)
showProject()
library(adapr)
? progress_text
? ddply
library(adapr)
library(adapr)
importProject
library(adapr)
setProject("Deas_602")
importData()
length(getAdaprOptions()$git)==0
testActive <- getAdaprOptions()$git=="FALSE"
testActive
install.packages("roxygen2")
install.packages("pkgload")
install.packages("roxygen2")
install.packages("plotly")
install.packages("pillar")
install.packages("pillar")
install.packages("pillar")
library(adapr)
source('~/Documents/Projects/adapr/R/workspaceOperations.R')
library(adapr)
data(aSAH)
library(pROC)
data(aSAH)
temp <- roc(aSAH$outcome, aSAH$s100b,
levels=c("Good", "Poor"))
plot(temp)
source('~/Documents/Projects/adapr/R/run_Program.R')
library(adapr)
setProject("R_test")
listScipte
listScripts()
runScript("read_data.R")
? callr::r_safe
install.packages("callr")
install.packages("callr")
r(function() ls())
library(callr)
r(function() ls())
r(function() .libPaths())
20/.9
power.t.test(n=20,power=.8)
power.t.test(n=20,power=.8,sig.level = 0.025)
power.t.test(n=20,power=,delta=1.0,sig.level = 0.025)
power.t.test(n=20,power=,delta=1.0,sig.level = 0.03)
power.t.test(n=20,power=,delta=1.0,sig.level = 0.05)
runScript <- function(pathToScript){
callr::rcmd_safe(cmd="batch",cmdargs = paste(pathToScript,"--no-save "))
}
runScript("read_data.R")
source('~/Documents/Projects/adapr/R/run_Program.R')
runScriptQuite("read_data.R")
runScriptQuiet("read_data.R")
ls()
showProject()
library(adapr)
showProject()
testFile <- "/Volumes/WORKING2/Projects/Gelfond/R_test/Programs/read_data.R"
runScriptQuiet(testFile)
temp <- runScriptQuiet(testFile)
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile)
temp
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile)
temp
?rcmd_safe
library(adapr)
getProject()
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile)
temp
#/Volumes/WORKING2/Projects/Gelfond/R_test/Programs/read_data.R
valueOut <- callr::rcmd_safe(cmd="Batch",cmdargs = paste(pathToScript,"--no-save "),show=TRUE,...)
#/Volumes/WORKING2/Projects/Gelfond/R_test/Programs/read_data.R
valueOut <- callr::rcmd_safe(cmd="Batch",cmdargs = paste(pathToScript,"--no-save "),...)
#/Volumes/WORKING2/Projects/Gelfond/R_test/Programs/read_data.R
valueOut <- callr::rcmd_safe(cmd="Batch",cmdargs = paste(pathToScript,"--no-save "))
runScriptQuiet <- function(pathToScript,...){
#/Volumes/WORKING2/Projects/Gelfond/R_test/Programs/read_data.R
valueOut <- callr::rcmd_safe(cmd="Batch",cmdargs = paste(pathToScript,"--no-save "))
return(valueOut$status)
}
source('~/Documents/Projects/adapr/R/run_Program.R')
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile,show=TRUE)
temp <- runScriptQuiet(testFile,show=FALSE)
source('~/Documents/Projects/adapr/R/run_Program.R')
library(adapr)
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile,show=FALSE)
source('~/Documents/Projects/adapr/R/run_Program.R')
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile,show=FALSE)
temp <- runScriptQuiet(testFile,stderr=FALSE,stdout=FALSE)
rcmd("config", "CC")
source('~/Documents/Projects/adapr/R/run_Program.R')
temp <- runScriptQuiet(testFile,stderr=FALSE,stdout=FALSE)
runScript("read_data.R","R_test")
source('~/Documents/Projects/adapr/R/run_Program.R')
runScript("read_data.R","R_test")
source('~/Documents/Projects/adapr/R/sync_test_si.R')
? runScript
setProject(adaprTest)
setProject("adaprTest")
graphProject()
syncProject()
showProject()
syncProject()
library(adapr)
showProject()
syncProject()
library(adapr)
syncProject()
syncProject()
library(adapr)
syncProject()
source('~/Documents/Projects/adapr/R/run_Program.R')
syncProject()
runScript
syncProject()
showProject()
runScript("read_data.R")
sessionInfo()
Library(c("car","dplyr"))
library(adapr)
Library(c("car","dplyr"))
Library
library(adapr)
Library
Library(c("car","dplyr"))
sessionInfo()
library(adapr)
sessioninfo::package_info()
Library(c("car","dplyr"))
sessioninfo::package_info()
Library(c("car","lme4"))
Library(c("car","dplyr"))
Library(c("car","lme4"))
Library
library(adapr)
Library(c("car","lme4"))
Library(c("car","lme4","ggplot2"))
library(adapr)
library(adapr)
ls()
library(adapr)
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? class
source('~/Documents/Projects/adapr/R/Write.R')
source('~/Documents/Projects/adapr/R/Write.R')
class(keyPlot)
temp <- ggplot(cars,aes(mpg,cyl))+geom_point()
library(ggplto2)
library(ggplot2)
temp <- ggplot(cars,aes(mpg,cyl))+geom_point()
class(temp)
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
require("adapr")
require("methods")
require("knitr")
Library(c("readxl","tableone"))
paste0("Created on ",(Sys.time() ))
require("adapr")
require("methods")
require("knitr")
Library(c("readxl","tableone"))
paste0("Created on ",(Sys.time() ))
#If TRUE then will "knit" in RStudio
if(TRUE){scriptLoader("Jha_484","swip_table.R")}
post <- Read("SWIP/SWIP Post Results.xlsx",read.fcn = read_xlsx)
View(post)
post <- Read("SWIP/SWIP Post Results.xlsx",read.fcn = read_xlsx)
pre <- Read("SWIP/SWIP Pre Results.xlsx",read.fcn = read_xlsx)
require("adapr")
require("methods")
require("knitr")
Library(c("plyr","dplyr","readxl","tableone"))
paste0("Created on ",(Sys.time() ))
#If TRUE then will "knit" in RStudio
if(TRUE){scriptLoader("Jha_484","swip_table.R")}
post <- Read("SWIP/SWIP Post Results.xlsx",read.fcn = read_xlsx)
pre <- Read("SWIP/SWIP Pre Results.xlsx",read.fcn = read_xlsx)
? rbind.fill
CreateTableOne(c("Age (months)","Sex","Weight (Kg)","RACHS"),strata="Time",data=allpts)
post <- Read("SWIP/SWIP Post Results.xlsx",read.fcn = read_xlsx)
pre <- Read("SWIP/SWIP Pre Results.xlsx",read.fcn = read_xlsx)
pre$Time <- "Pre"
post$Time <- "Post"
allpts <- rbind.fill(pre,post)
allpts$Time <- factor(allpts$Time,levels = c("Pre","Post"))
tab1 <- CreateTableOne(c("Age (months)","Sex","Weight (Kg)","RACHS"),strata="Time",data=allpts)
tab1
View(pre)
post <- Read("SWIP/SWIP Post Results.xlsx",read.fcn = read_xlsx)
pre <- Read("SWIP/SWIP Pre Results.xlsx",read.fcn = read_xlsx)
pre$Time <- "Pre"
post$Time <- "Post"
names(post)[names(post)=="Weight (Kg)"] <- "Weight (kg)"
allpts <- rbind.fill(pre,post)
allpts$Time <- factor(allpts$Time,levels = c("Pre","Post"))
tab1 <- CreateTableOne(c("Age (months)","Sex","Weight (Kg)","RACHS"),strata="Time",data=allpts)
tab1
post <- Read("SWIP/SWIP Post Results.xlsx",read.fcn = read_xlsx)
pre <- Read("SWIP/SWIP Pre Results.xlsx",read.fcn = read_xlsx)
pre$Time <- "Pre"
post$Time <- "Post"
names(post)[names(post)=="Weight (Kg)"] <- "Weight (kg)"
allpts <- rbind.fill(pre,post)
allpts$Time <- factor(allpts$Time,levels = c("Pre","Post"))
tab1 <- CreateTableOne(c("Age (months)","Sex","Weight (kg)","RACHS"),strata="Time",data=allpts)
tab1
kable(print(tab1,nonnormal = FALSE,showAllLevels = TRUE))
kable(print(tab1,nonnormal = TRUE,showAllLevels = TRUE))
library(adapr)
commitProject
finalize_dependency
gitHistorySearch
adapr::gitInfo
gitInfo()
git2r::head()
getwd()
repo <- getwd()
gitRepo <- getwd()
repo <- git2r::repository(gitRepo)
git2r::default_signature(repo)
git2r::default_signature(repo)
git2r::head(repo)
?git2r::head
?git2r::head()
??git2r::head()
repo <- getwd()
git2r::last_commit(repo )
git2r::last_commit(repo )
class(git2r::last_commit(repo ))
as.character(git2r::last_commit(repo ))
committed <- git2r::last_commit(repo )
names(committed)
committted$message
committed$message
committed$summary
committed$sha
committed$author
committed$committer
capture.output(committed)  committed$committer
capture.output(committed)
#' Create DocID based on true random number
#' @param nhash Number of hashes to avoid hash collision
#' @param gitTF Logical whether to include git information
#' @param gitRepo path to git repository
#' @return data.frame
#' @export
#' @examples
#'\dontrun{
#' # Requires internet connection to access GitHub.
#' docIDborn()
#'}
docIDborn <- function(nhash=nhash,gitTF=FALSE,gitRepo=getwd()) {
nhash <- as.integer(nhash)
docIDs <- random::randomNumbers(n=nhash, min=1, max=1e6,col=1)
user <- Sys.info()["user"]
time <- Sys.time()
idFrame <- list(docIDs,Creator=user,DesignedOn = time)
idFrame <- data.frame(digest::digest(idFrame),Creator=user,DesignedOn = time)
if(gitTF){
repo <- git2r::repository(gitRepo)
committed <- git2r::last_commit(repo )
gitSummary <- capture.output(committed)
idFrame$gitInfo <- gitSummary
}
rownames(idFrame) <- NULL
return(idFrame)
}
docIDcomputed <- function() {
user <- Sys.info()["user"]
time <- Sys.time()
idFrame <- data.frame(ComputedBy=user,ComputedOn = time)
rownames(idFrame) <- NULL
return(idFrame)
}
printDocId <- function(){
knitr::kable(docIDcomputed())
}
creatorDocID <- function(){
paste("\n\n",printDocId(),"\n\n",collapse="\n")
}
docIDborn(gitTF = TRUE)
docIDborn <- function(nhash=1,gitTF=FALSE,gitRepo=getwd()) {
nhash <- as.integer(nhash)
docIDs <- random::randomNumbers(n=nhash, min=1, max=1e6,col=1)
user <- Sys.info()["user"]
time <- Sys.time()
idFrame <- list(docIDs,Creator=user,DesignedOn = time)
idFrame <- data.frame(digest::digest(idFrame),Creator=user,DesignedOn = time)
if(gitTF){
repo <- git2r::repository(gitRepo)
committed <- git2r::last_commit(repo )
gitSummary <- capture.output(print(committed))
idFrame$gitInfo <- gitSummary
}
rownames(idFrame) <- NULL
return(idFrame)
}
docIDcomputed <- function() {
user <- Sys.info()["user"]
time <- Sys.time()
idFrame <- data.frame(ComputedBy=user,ComputedOn = time)
rownames(idFrame) <- NULL
return(idFrame)
}
printDocId <- function(){
knitr::kable(docIDcomputed())
}
creatorDocID <- function(){
paste("\n\n",printDocId(),"\n\n",collapse="\n")
}
docIDborn(gitTF = TRUE)
docIDborn(gitTF = FALSE)
library(adapr)
