plantOrchard
plant.tree
library(adapr)
initProject
plantTree
adapr::plantTree
library(adapr)
source('~/Documents/Projects/adapr/R/plant_tree.R')
plantTree()
plantTree
library(adapr)
library(adapr)
ls()
rm(list=ls())
library(adapr)
gitConfigureTest()
gitConfigureTest
gitConfigure
gitConfigure()
gitConfigure()
gitConfigureTest()
? gitConfigureTest
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("git","TRUE")
setAdaprOptions("git","TRsdf")
setAdaprOptions("git","FALSE")
setAdaprOptions("git","TRUE")
git2r::config(global=TRUE)
source('~/Documents/Projects/adapr/R/git_config_test.R')
gitConfigureTest()
source('~/Documents/Projects/adapr/R/git_config_test.R')
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("git","FALSE")
setAdaprOptions("git","TRUE")
source('~/Documents/Projects/adapr/R/updateAdaprConfig.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/guess_write_fnc.R')
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/guess_write_fnc.R')
ls()
library(adapr)
library(adapr)
library(adapr)
??is.installed
is.installed
install.packages()
?install.packages
library(adapr)
?install_github
source('~/Documents/Projects/adapr/R/adaprInstall.R')
adaprInstall(betaTF = 1)
source('~/Documents/Projects/adapr/R/adaprInstall.R')
adaprInstall(betaTF = 1)
adaprInstall(betaTF = 1)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/run_Program.R')
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/run_Program.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
checkVersion("adapr")
checkVersion("adapr",version0="2.0.0")
checkVersion("adapr",version0="2.0.1")
checkVersion("adapr",version0="adsfasdf")
checkVersion("adapsdfafr",version0="adsfasdf")
gsub("\\-","\\.","2.0.0")
gsub("\\-","\\.","2-0-0")
checkVersion("adapr",version0="adsfasdf",versionCheck = TRUE)
checkVersion("adapr",version0="2.0.0",versionCheck = TRUE)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? install_github
? devtools::install_github
source('~/Documents/Projects/adapr/R/adaprInstall.R')
library(adapr)
relocateProject()
relocateProject
setProject()
setProject
getProjectLibrary
library(adapr)
library(adapr)
setProject
source('~/Documents/Projects/adapr/R/get_project_path.R')
library(adapr)
library(adapr)
plantTree
library(adapr)
plantTree
relocateProject()
setProject
getProjectLibrary
library(adapr)
initProject("testdsafjkl",project.libraryTF = 1)
showProject()
getProjectLibrary()
.libPaths()
adaprInstall(betaTF=TRUE)
setAdaprOptions("adaprBeta","TRUE")
removeProject(""testdsafjkl"")
removeProject(""testdsafjkl"")
removeProject("testdsafjkl")
initProject("testdsafjkl",project.libraryTF = 1)
getProjectLibrary()
initProject("testdsafjkl",project.libraryTF = 1)
library(adapr)
removeProject("testdsafjkl")
initProject("testdsafjkl",project.libraryTF = 1)
removeProject("testdsafjkl")
initProject("initLibTest",project.libraryTF = 1)
getAdaprOptions()
.libPaths("/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(adapr)
library(adapr)
initProject("testLib2")
runScript("read_data.R")
adaprInstall
source('~/Documents/Projects/adapr/R/adaprInstall.R')
getProjectLibrary()
adaprInstall()
library(adapr)
source('~/Documents/Projects/adapr/R/adaprInstall.R')
adaprInstall()
? install
?install.packages
.libPaths()
getOption("repos")
install.packages("devtools")
? .libPaths
adaprInstall(library.location=pather)
?install.packages
library(adapr)
install.packages("devtools")
install.packages("devtools",dependencies = TRUE)
library(devtools)
library(adapr)
library(adapr)
setProject(project.id)
library(devtools)
devtools::install?
?devtools::install
source('~/Documents/Projects/adapr/R/adaprInstall.R')
adaprInstall(getLibrary("testLib4"))
adaprInstall(getLibrary("testLib4"))
adaprInstall(getProjectLibrary())
getProjectLibrary()
getProjectLibrary()
library.location <- library.location
library.location <- getProjectLibrary()
devtools::install(adaprDependencies(),lib=library.location,dependencies = c("Depends","Imports"),type = "source")
library.location
install_cran(pkgs = adaprDependencies())
install_cran(pkgs = adaprDependencies())
.libPaths()
install_cran(pkgs = adaprDependencies(),force=TRUE,dependencies=TRUE)
install_cran(pkgs = adaprDependencies(),force=TRUE,dependencies=TRUE,lib=library.location)
browseURL(library.location)
runScript("read_data.R")
installProjectPackages()
installLibrary()
getLibrary()
devtools::package_deps("devtools")
devtools::package_deps("curl")
devtools::package_deps("httr")
devtools::package_deps("rstudioapi")
devtools::package_deps("adapr")
library(adapr)
library(adapr)
setProject("Flores_422_Cervical_Cancer")
showProject()
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/prediction_models.R')
runScript(logRmd = TRUE)
showResults()
summary(lm(acculturation ~ education + age + primary_language + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
summary(lm(health_self_efficacy ~ education + age + primary_language + healthcare+acculturation, data = flores))
summary(glm(pap_test_bin ~  acculturation +health_literacy +health_self_efficacy, data = flores, family = "binomial"))
summary(lm(acculturation ~ education + age + primary_language + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
lm(health_literacy ~ education + age + healthcare+acculturation, data = flores)$residuals
length(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores)$residuals)
flores$age
range(flores$age)
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
table(flores$healthcare)
summary(glm(pap_test_bin ~  acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
table(flores$pap_test_bin)
adaprApp()
showProject()
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(RCurl)
library(tableone)
library(redcapAPI)
source.file <-"read_data.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
## Set secret token specific to your REDCap project
rcon <- redcapConnection(url="https://redcap.uthscsa.edu/REDCap/api/", token="4731AEB45DF95D503F35D6F9804CFC2B")
flores <- exportRecords(rcon,checkboxLabels=TRUE,labels=TRUE)
## Drop women > 65 years old.
flores <- subset(flores,(age <= 65) & (sex_of_participant=="1. Female"))
## Compute Acculturation *1 to 12
acculturation <- subset(flores,select=c('read_speak','lang_child','lang_home','lang_think','lan_friends','lang_tv','lang_radio','lang_movies','close_friends','social_gathering','visits','choose_friends'))
for(a in names(acculturation)){
acculturation[[a]] <- as.character(acculturation[[a]])
acculturation[[a]] <- as.numeric(as.character(gsub("\\..*","",acculturation[[a]])))
}
flores$acculturation <- rowSums(acculturation,na.rm=TRUE)
## Compute Health Literacy
health_literacy <- subset(flores,select=c('q_1','q_2','q_3','q_4','safe_question','peanut_oil'))
for(l in names(health_literacy)){
health_literacy[[l]] <- as.character(health_literacy[[l]])
health_literacy[[l]] <- as.numeric(ifelse(health_literacy[[l]]=="Yes",1,0))
}
flores$health_literacy <- rowSums(health_literacy,na.rm=TRUE)
efficacy.questions <- c('discuss_paptest1','schedule_paptest2','new_office_paptest3','doctor_referral_paptest4','next_paptest5','worried_paptest6','discouraged_paptest7','payfor_paptest8')
## Health Self Efficacy 32 to 39 | 44 to 51 (Fernandez)
health_self_efficacy <- subset(flores,select=c('discuss_paptest1','schedule_paptest2','new_office_paptest3','doctor_referral_paptest4','next_paptest5','worried_paptest6','discouraged_paptest7','payfor_paptest8',
'que_tan44','que_tan45','que_tan46','que_tan47','que_tan48','que_tan49','que_tan50','que_tan51'))
for(s in names(health_self_efficacy)){
health_self_efficacy[[s]] <- as.character(health_self_efficacy[[s]])
health_self_efficacy[[s]] <- as.numeric(as.character(gsub("\\..*","",health_self_efficacy[[s]])))
}
flores$health_self_efficacy <- rowSums(health_self_efficacy,na.rm=TRUE)
names(flores)
flores$last_papsmear_test
flores$pap_test_bin <- ifelse(flores$last_papsmear_test %in% c("1. Within the past year",
"2. Within the past 2 years",
"3. Within the past 3 years"))
flores$pap_test_bin <- ifelse(flores$last_papsmear_test %in% c("1. Within the past year",
"2. Within the past 2 years",
"3. Within the past 3 years"),1,0)
with(flores,table(pap_test_bin,last_papsmear_test))
with(flores,table(last_papsmear_test,pap_test_bin))
addmargins(with(flores,table(last_papsmear_test,pap_test_bin)))
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/prediction_models.R')
runScript(logRmd = 1)
library(tableone)
CreateTableOne(c("age","acculturation" ,"health_literacy" ,"health_self_efficacy","healthcare","education"),"pap_test_bin",flores)
names(flores)
with(flores,table(worried_paptest6,pap_test_bin))
fisher.test(with(flores,table(worried_paptest6,pap_test_bin)))
table(flores$pap_test_bin)
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
runScript(r="")
runScript(r="",logRmd = 1)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(RCurl)
library(tableone)
library(redcapAPI)
source.file <-"read_data.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
## Set secret token specific to your REDCap project
rcon <- redcapConnection(url="https://redcap.uthscsa.edu/REDCap/api/", token="4731AEB45DF95D503F35D6F9804CFC2B")
flores <- exportRecords(rcon,checkboxLabels=TRUE,labels=TRUE)
## Drop women > 65 years old.
flores <- subset(flores,(age <= 65) & (sex_of_participant=="1. Female"))
## Compute Acculturation *1 to 12
acculturation <- subset(flores,select=c('read_speak','lang_child','lang_home','lang_think','lan_friends','lang_tv','lang_radio','lang_movies','close_friends','social_gathering','visits','choose_friends'))
for(a in names(acculturation)){
acculturation[[a]] <- as.character(acculturation[[a]])
acculturation[[a]] <- as.numeric(as.character(gsub("\\..*","",acculturation[[a]])))
}
flores$acculturation <- rowSums(acculturation,na.rm=TRUE)
## Compute Health Literacy
health_literacy <- subset(flores,select=c('q_1','q_2','q_3','q_4','safe_question','peanut_oil'))
for(l in names(health_literacy)){
health_literacy[[l]] <- as.character(health_literacy[[l]])
health_literacy[[l]] <- as.numeric(ifelse(health_literacy[[l]]=="Yes",1,0))
}
flores$health_literacy <- rowSums(health_literacy,na.rm=TRUE)
efficacy.questions <- c('discuss_paptest1','schedule_paptest2','new_office_paptest3','doctor_referral_paptest4','next_paptest5','worried_paptest6','discouraged_paptest7','payfor_paptest8')
## Health Self Efficacy 32 to 39 | 44 to 51 (Fernandez)
health_self_efficacy <- subset(flores,select=c('discuss_paptest1','schedule_paptest2','new_office_paptest3','doctor_referral_paptest4','next_paptest5','worried_paptest6','discouraged_paptest7','payfor_paptest8',
'que_tan44','que_tan45','que_tan46','que_tan47','que_tan48','que_tan49','que_tan50','que_tan51'))
for(s in names(health_self_efficacy)){
health_self_efficacy[[s]] <- as.character(health_self_efficacy[[s]])
health_self_efficacy[[s]] <- as.numeric(as.character(gsub("\\..*","",health_self_efficacy[[s]])))
}
flores$health_self_efficacy <- rowSums(health_self_efficacy,na.rm=TRUE)
## pap test binary
#flores$pap_test_bin <- ifelse(flores$pap_test == "1. Yes",1,
#                       ifelse(flores$pap_test == "2. No",0,NA))
flores$pap_test_bin <- ifelse(flores$last_papsmear_test %in% c("1. Within the past year",
"2. Within the past 2 years"#,
#"3. Within the past 3 years"
),1,0)
flores$last_papsmear_test
levels(flores$last_papsmear_test)
levels(flores$pap_test)
flores$times_since <- mapvalues(flores$last_papsmear_test,levels(flores$last_papsmear_test),c(1,2,3,5,NA,NA))
flores$times_since <- mapvalues(flores$last_papsmear_test,levels(flores$last_papsmear_test),c(1,2,3,5,NA,NA))
flores$times_since[flores$pap_test_bin=="2. No"] <- 5
flores$times_since
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(ggplot2)
library(reshape2)
library(PerformanceAnalytics)
library(tableone)
source.file <-"prediction_models.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="do demographic factors predict health literacy etc.")
# Program body here
flores <- Load.branch("data.Rdata")
summary(lm(acculturation ~ education + age  + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
summary(lm(health_self_efficacy ~ education + age + primary_language + healthcare+acculturation, data = flores))
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(ggplot2)
library(reshape2)
library(PerformanceAnalytics)
library(tableone)
source.file <-"prediction_models.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="do demographic factors predict health literacy etc.")
# Program body here
flores <- Load.branch("data.Rdata")
summary(lm(acculturation ~ education + age  + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
summary(lm(health_self_efficacy ~ education + age + primary_language + healthcare+acculturation, data = flores))
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores)
library(survival)
coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores)
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(ggplot2)
library(reshape2)
library(PerformanceAnalytics)
library(tableone)
library(survival)
source.file <-"prediction_models.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="do demographic factors predict health literacy etc.")
# Program body here
flores <- Load.branch("data.Rdata")
summary(lm(acculturation ~ education + age  + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
summary(lm(health_self_efficacy ~ education + age + primary_language + healthcare+acculturation, data = flores))
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores)
flores$time_since
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(ggplot2)
library(reshape2)
library(PerformanceAnalytics)
library(tableone)
library(survival)
source.file <-"prediction_models.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="do demographic factors predict health literacy etc.")
# Program body here
flores <- Load.branch("data.Rdata")
summary(lm(acculturation ~ education + age  + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
summary(lm(health_self_efficacy ~ education + age + primary_language + healthcare+acculturation, data = flores))
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores)
flores$timeToPap <- with(flores,Surv(time_since,pap_test_ever))
flores$timeToPap
with(flores,table(time_since,pap_test_ever))
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
source('/Volumes/WORKING2/Projects/Goros/Flores_422_Cervical_Cancer/Programs/read_data.R')
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(ggplot2)
library(reshape2)
library(PerformanceAnalytics)
library(tableone)
library(survival)
source.file <-"prediction_models.R"
project.id <- "Flores_422_Cervical_Cancer"
source_info <- create_source_file_dir(source.description="do demographic factors predict health literacy etc.")
# Program body here
flores <- Load.branch("data.Rdata")
summary(lm(acculturation ~ education + age  + healthcare, data = flores))
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
summary(lm(health_self_efficacy ~ education + age + primary_language + healthcare+acculturation, data = flores))
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores)
flores$timeToPap
with(flores,Surv(time_since,pap_test_ever))
flores$timeToPap <- with(flores,Surv(time_since,pap_test_ever))
flores$timeToPap
coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores)
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +health_self_efficacy+healthcare, data = flores, family = "binomial"))
CreateTableOne(c("age","acculturation" ,"health_literacy" ,"health_self_efficacy","healthcare","education"),"pap_test_bin",flores)
runScript()
runScript()
showResults()
runScript(logRmd = 1)
summary(glm(pap_test_bin ~  age+acculturation +health_literacy +healthcare, data = flores, family = "binomial"))
TimeSinceModel <- coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy +healthcare, data = flores)
summary(TimeSinceModel)
summary(lm(health_literacy ~ education + age + healthcare+acculturation, data = flores))
runScript(logRmd = 1)
TimeSinceModel <- coxph(Surv(time_since,pap_test_ever)~ age+acculturation +health_literacy , data = flores)
summary(TimeSinceModel)
syncProject()
co
rm(list=ls())
setProject
getProjectLibrary
source('~/Documents/Projects/adapr/R/adaprInstall.R')
library(adapr)
library(adapr)
setProject("adaprHome")
getProjectLibrary()
listProjects("adaprHome")
pullSourceInfo("adaprHome")
listProjects()
library(adapr)
source('~/Documents/Projects/adapr/R/adaprInstall.R')
setProject("adaprHome")
adaprInstall()
getProjectLibrary("adaprHome")
setProject("Weiner_SNP")
getProjectLibrary()
project.id0=getProject()
all.projects <- get_orchard()
project.out <- subset(all.projects,all.projects$project.id==project.id0)
if(nrow(project.out)!=1){stop("Project.id cannot be used to resolve project path")}
if(as.character(project.out$project.library)=="FALSE"){return(getAdaprOptions()$library)}
pather <- as.character(project.out$library.path)
if((is.na(pather))|(pather=="")){pather <- file.path(getProjectPath(),project.directory.tree$support,project.directory.tree$library.bank)}
rversion <- gsub("\\.","_",paste0(R.Version()$major,"_",R.Version()$minor))
pather <- file.path(pather,rversion,.Platform$OS.type,gsub("\\.","_",make.names(utils::sessionInfo()$platform)))
libprevious <- .libPaths()[1]
if(!dir.exists(pather)){
dir.create(pather,recursive = TRUE)
.libPaths(pather)
adaprInstall(library.location=pather)
}
.libPaths(libprevious)
pather
project.out$project.library
as.logical("packrat")
as.logical(project.out$project.library)|(project.out$project.library)!="packrat"
ifelse(is.na(as.logical(project.out$project.library),TRUE,as.logical(project.out$project.library)))
testLibrary <- ifelse(is.na(as.logical(project.out$project.library)),TRUE,as.logical(project.out$project.library))
testLibrary
source('~/Documents/Projects/adapr/R/get_project_path.R')
getProjectLibrary()
source('~/Documents/Projects/adapr/R/get_project_path.R')
all.projects <- get_orchard()
project.out <- subset(all.projects,all.projects$project.id==project.id0)
if(nrow(project.out)!=1){stop("Project.id cannot be used to resolve project path")}
testLibrary <- ifelse(is.na(as.logical(project.out$project.library)),TRUE,as.logical(project.out$project.library))
if(testLibrary|(project.out$project.library)=="packrat"){return(getAdaprOptions()$library)}
testLibrary
testLibrary <- ifelse(is.na(as.logical(project.out$project.library)),TRUE,!as.logical(project.out$project.library))
testLibrary
is.na(as.logical(project.out$project.library))
!as.logical(project.out$project.library)
testLibrary <- ifelse(is.na(as.logical(project.out$project.library)),TRUE,!as.logical(project.out$project.library))
if(testLibrary|(project.out$project.library)=="packrat"){return(getAdaprOptions()$library)}
source('~/Documents/Projects/adapr/R/get_project_path.R')
getProjectLibrary()
library(adapr)
all.projects <- get_orchard()
project.out <- subset(all.projects,all.projects$project.id==project.id0)
if(nrow(project.out)!=1){stop("Project.id cannot be used to resolve project path")}
testLibrary <- ifelse(is.na(as.logical(project.out$project.library)),TRUE,!as.logical(project.out$project.library))
testLibrary
source('~/Documents/Projects/adapr/R/get_project_path.R')
library(adapr)
installed.packages
install.packages
adaprDependencies()
library(packrat)
? packrat::init
? packrat::install
source('~/Documents/Projects/adapr/R/plant_tree.R')
