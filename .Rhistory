item_diff_pre2[['q11']]
item_diff_pre2[['q12']]
item_diff_pre2[['q13']]
item_diff_pre2[['q14']]
item_diff_pre2[['q15']]
match_df
head(pilot)
dim(pilot)
preids <- subset(pilot,pre_post=="pre")$student..
postids <- subset(pilot,pre_post=="pre")$student..
preids <- subset(pilot,pre_post=="pre")$student..
postids <- subset(pilot,pre_post=="pre")$student..
venn.diagram(list("Pre"=preids,"Post"=postids),
filename=file.path(source_info$results.dir,"prepost.tiff"),cat.cex=0.75,
alpha = c(0.5, 0.5),fill=c("red","blue"),main="Student IDs Pre and Post",height=1000,width=1000,resolution=250,margin=0.05)
showResults()
preids <- subset(pilot,pre_post=="pre")$student..
postids <- subset(pilot,pre_post=="post")$student..
venn.diagram(list("Pre"=preids,"Post"=postids),
filename=file.path(source_info$results.dir,"prepost.tiff"),cat.cex=0.75,
alpha = c(0.5, 0.5),fill=c("red","blue"),main="Student IDs Pre and Post",height=1000,width=1000,resolution=250,margin=0.05)
pilot
intersect(preids,postids)
length(intersect(preids,postids))
65+17+28
table(table(pilot$student..))
View(pilot)
sum(duplicated(preids))
sum(duplicated(postids))
17/(65+17)
getProject()
makeScript("meeting_2017_12_6.R","prelim analyis of pre/post study")
openScript("meeting_2017_12_6.Rmd")
showProject()
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
graphProject("adaprTest")
library(adapr)
graphProject("adaprTest")
graphProject("adaprTest",FALSE)
graphProject("adaprTest",TRUE)
graphProject("adaprTest",FALSE)
graphProject("N2K",FALSE)
graphProject("adaprTest",TRUE)
graphProject("N2K",TRUE)
setProject("N2K")
listScripts()
listScripts()$last.run.time.sec
sum(listScripts()$last.run.time.sec)
library(adapr)
adaprUpdate
checkRmdMode()
library(adapr)
loadAdaprTest
Digest("system.file("adaprTest.zip", package = "adapr"))
Digest(system.file("adaprTest.zip", package = "adapr"))
Digest(system.file("adaprTest.zip", package = "adapr"),file=TRUE)
Digest(file=system.file("adaprTest.zip", package = "adapr"))
source('~/Documents/Projects/adapr/R/guress_read_fcn.R')
identical(utils::read.csv,guess.read.fcn("data.csv"))
idPackages()
library(adapr)
library(adapr)
makeHyperlink("myPath","click here to my path")
library(adapr)
library(adapr)
library(adapr)
devtools::load_all(".")
library(adapr)
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
scriptSubgraph("N2K",plotTF = 1)
temp <- scriptSubgraph("N2K",plotTF = 1)
temp
names(temp)
plot(temp$subgraph)
plot(temp$subgraph,layout=layout)
plot(temp$subgraph)
plot(temp$subgraph,layout(layout))
plot(temp$subgraph,layout=layout_sujiyama)
?? sujiyama
plot(temp$subgraph,layout=layout_with_sugiyama)
plot(temp$subgraph,layout=layout_with_sugiyama())
? layout_with_sugiyama
plot(temp$subgraph,layout=layout_with_sugiyama(temp$subgraph))
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph))
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout)
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout,vertex.labels.color=NA)
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout,vertex.labels.color="blue")
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout,vertex.labels.color="black")
library(adapr)
makeRelativeHyperlink("myPath","myPath/pathToFile","click here to my path")
ls()
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts
searchScripts("read","read_data.R","adaprHome")
searchScripts("read","adaprHome")
? list.files
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read","adaprHome")
path <- getProjectPath(project.id)
project.id
files <- c(list.files(file.path(path,'Programs')),
list.files(file.path(path,'Programs','Markdown')),
list.files(file.path(path,'Programs','support_functions')))
files
setProject("adaprHome")
files <- c(list.files(file.path(path,'Programs')),
list.files(file.path(path,'Programs','Markdown')),
list.files(file.path(path,'Programs','support_functions')))
filesr <- grep('(R$)|(\\.Rmd$)',files, value=TRUE)
scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,readLines)
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read","adaprHome")
project.id <- "adaprHome"
path <- getProjectPath(project.id)
files <- c(list.files(file.path(path,'Programs')),
list.files(file.path(path,'Programs','Markdown')),
list.files(file.path(path,'Programs','support_functions')))
filesr <- grep('(R$)|(\\.Rmd$)',files, value=TRUE)
filesr
scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,readLines)
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
scripts
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
filesr
scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,readLines)
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
scripts
top <- lapply(scripts,funtion(x){readLines(x)})
top <- lapply(scripts,function(x){readLines(x)})
path <- getProjectPath(project.id)
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,function(x){readLines(x)})
scripts
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,function(x){readLines(x)})
scripts
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read","adaprHome")
searchScripts("gelfond","adaprHome")
viewData <- function(df){
fileToWrite <- file.path(tempdir(),"adaprOverwrite.csv")
write.csv(df,fileToWrite,row.names=FALSE)
browseURL(fileToWrite)
}
viewData(mtcars)
library(adapr)
library(adapr)
? write
? lm
library(adapr)
viewData(mtcars)
getAdaprOptions(FALSE)
library(adapr)
getAdaprOptions(FALSE)
names( getAdaprOptions(FALSE))
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("dasf","sadfljk;")
setAdaprOptions("git","TRUE")
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("dasf","sadfljk;")
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("dasf","sadfljk;")
library(adapr)
? initProject
setProject("Weiner_SNP")
listScripts()
source('~/Documents/Projects/adapr/R/list_files.R')
listScripts()
source('~/Documents/Projects/adapr/R/list_files.R')
listScripts()
listScripts()
setProject("Gelfond_394")
listScripts()
setProject("Finasterice_challenge")
listScripts()
setProject("Finasteride_challenge")
listScripts()
listBranches()
setProject("Weiner_SNP")
listBranches()
listScripts()
library(adapr)
library(adapr)
library(adapr)
getAdaprOptions()
Sys.setenv()
Sys.getenv()
Sys.setenv()
?Sys.setenv()
Sys.setenv(PATH=getAdaprOptions()$PATH)
source('~/Documents/Projects/adapr/R/project_report_markdown.R')
projectReport()
reportProject()
temp <- reportProject()
browseURL(temp)
Sys.setenv(PATH=getAdaprOptions()$PATH)
library(adapr)
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id2=unique(project.id))
dplyr::ddply(projects,"project.id2",function(x){
path <- getProjectPath(x$project.id2[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- dplyr::ddply(projects,"project.id2",function(x){
path <- getProjectPath(x$project.id2[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts("plot")
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id2",function(x){
path <- getProjectPath(x$project.id2[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts("plot")
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id2",function(x){
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts("plot")
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id",function(x){
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
}
searchScripts("plot")
searchScripts("plot",listProjects()$project.id)
searchScripts("plot",listProjects()$project)
listProjects()$project
temp <- listProjects()
temp
searchScripts("plot",listProjects()$project.id)
project.id <- listProjects()$project.id
projects <- data.frame(project.id=unique(project.id))
projects
count.dat <- plyr::ddply(projects,"project.id",function(x){
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
head(projects)
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id",function(x){
try({
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
})
return(count.dat)
}
searchScripts("plot",listProjects()$project.id)
data.frame()
searchScripts <- function(matcher,project.id = getProject(),...){
projects <- data.frame(project.id=unique(project.id))
count.dat <- plyr::ddply(projects,"project.id",function(x){
count.dat <- data.frame()
try({
path <- getProjectPath(x$project.id[1])
files <- c(list.files(file.path(path,'Programs'),full.names = TRUE),
list.files(file.path(path,'Programs','Markdown'),full.names = TRUE),
list.files(file.path(path,'Programs','support_functions'),full.names = TRUE))
filesr <- grep('(\\.R$)|(\\.Rmd$)',files, value=TRUE)
#scripts <- file.path(path,'Programs',filesr)
scripts <- filesr
top <- lapply(scripts,function(x){readLines(x)})
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.dat <-  plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count.dat <- subset(count.dat,count.dat$V1>0)
names(count.dat) <- c("file","count")
count.dat <- merge(dirs,count.dat)
count.dat <- count.dat[order(-count.dat$count),]
})
return(count.dat)
})
return(count.dat)
}
searchScripts("plot",listProjects()$project.id)
searchScripts("plot",listProjects()$project.id[2:5])
searchScripts("plot",listProjects()$project.id)
searchScripts("demographics",listProjects()$project.id)
searchScripts("demographicsasdfasdfasfsadfds",listProjects()$project.id)
warnings()
formalArgs(viewData)
? formalArgs
viewData <- function(df){
fileToWrite <- file.path(tempdir(),"adaprOverwrite.csv")
print(quote(df))
utils::write.csv(df,fileToWrite,row.names=FALSE)
utils::browseURL(fileToWrite)
}
viewData(listProjects())
source('~/Documents/Projects/adapr/R/list_files.R')
viewData(listProjects())
source('~/Documents/Projects/adapr/R/list_files.R')
viewData(listProjects())
viewData(listProjects())
viewData(listProjects())
viewData(listProjects(),TRUE)
source('~/Documents/Projects/adapr/R/list_files.R')
viewData(listProjects(),TRUE)
viewData(listProjects(),TRUE)
viewData(listProjects(),FALSE)
viewData(listProjects(),TRUE)
viewData(listProjects(),TRUE)
importData
file.choose()
? file.choose
choose.dir
performanceTable <- loadFlex("ttsc_performanceTable.rda")
names(performanceTable)[names(performanceTable)=="Pval"] <- "P-value"
getProjectPath()
project.directory.tree$results
showResults <- function(project.id=getProject(),rscript=getSourceInfo()$file$file){
si <- pullSourceInfo(project.id)
if(is.null(rscript)){
utils::browseURL(file.path(getProjectPath(project.id),project.directory.tree$results))
}else{
resultdir <- file.path(getProjectPath(project.id),project.directory.tree$results,rscript)
utils::browseURL(resultdir)
}
}
library(adapr)
library(adapr)
getSourceInfo()
getSourceInfo
options(adaprScriptInfo=NULL)
options()$adaprScriptInfo
getSourceInfo()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? relocateProject
library(adapr)
source('~/Documents/Projects/adapr/R/setProject.R')
setProject("Escan")
setProject("Escan")
setProject("Escan")
source('~/Documents/Projects/adapr/R/setProject.R')
setProject("Escan")
library(adapr)
? adist
library(adapr)
importProject(,import.by.Rscript = TRUE)
graphProjec()
graphProject(testSync = FALSE)
setProject(project.id)
plotter <- graphProject(testSync=FALSE)
print(plotter)
importProject(import.by.Rscript = TRUE)
showProject()
