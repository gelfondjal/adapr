install.library(versionCheck = TRUE
)
install("Formula","1.2-1",installVersion = TRUE)
install.library()
install.library(versionCheck = TRUE)
? install.packages
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library(versionCheck = TRUE)
temp <- install.library(versionCheck = TRUE)
subset(temp,package=="tableone")
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck = TRUE)
temp
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library(versionCheck=TREU)
install.library(versionCheck=TRUE)
temp <- install.library(versionCheck=TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck=TRUE)
temp$success
library(adapr)
?packageVersion()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
library(adapr)
? packageVersion
? packageVersion
library(adapr)
library(adapr)
library(adapr)
library(adapr)
get.library()
set.project()
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library(0)
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
get.library <- function(project.id = get.project()){
programs <- list.programs(project.id)
path <- get.project.path(project.id)
packageInfo <- plyr::ddply(programs,"source.file",function(program){
results.dir <- file.path(path,adapr::project.directory.tree$results,program$source.file[1])
packages <- file.path(results.dir,paste0("Session_info_",gsub("\\.","_",program$source.file[1]),".RObj"))
#print(packages)
redd <- FALSE
try({
out <- readRDS(file=packages)$packages
})
if(!exists("out")){
load(file=packages)
if(!exists("obj")){obj <- NULL}
out <- obj$packages
}
return(out)
})
packageInfo$repos <- tolower(substring(packageInfo$source,1,4))
packageInfo <- subset(packageInfo,!duplicated(packageInfo$package))
return(packageInfo)
}
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
sync.project()
show.project()
graph.project()
list.projects()$project.id
set.project("adaprTest")
set.project("adaprTest",1)
list.project()
list.projects()
get.library()
get.library()
list.projects()$project.id
set.project("Macias_352")
get.library()
get.sourceInfo()
library(adapr)
ls()
get.sourceInfo()
library(adapr)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
get.sourceInfo
git.add
load.source.directory
load.install.library.file
library(adapr)
get.project()
set.project()
set.project("adaprHome")
set.project("adaprHomefdsa")
set.project("adaprHome")
make.program("testabs.R")
show.project()
source('~/Documents/Projects/adaprHome/Programs/testabs.R')
show.results()
require("adapr")
require("methods")
paste0("Created on ",(Sys.time() ))
# scriptLoader("adaprHome","testabs.R")
hist(rnorm(12000))
if(checkRmdMode()){dependency.out <- finalize_dependency() }
show.results()
get.sourceInfo()
run.proj
run.program()
checkRmdMode()
checkRmdMode()
require("adapr")
require("methods")
paste0("Created on ",(Sys.time() ))
scriptLoader("adaprHome","testabs.R")
hist(rnorm(1000000))
if(checkRmdMode()){dependency.out <- finalize_dependency() }
---
title: "adaprHome testabs.Rmd: "
author: "gelfond@somewhere.com"
output: html_document
---
```{r,echo=FALSE,message=FALSE,warning=FALSE,include=FALSE}
require("adapr")
require("methods")
paste0("Created on ",(Sys.time() ))
```
```{r,echo=FALSE,message=FALSE,warning=FALSE,include=FALSE}
scriptLoader("adaprHome","testabs.R")
```
#Check out my histogram
```{r}
hist(rnorm(1000000))
```
```{r,echo=FALSE}
if(checkRmdMode()){dependency.out <- finalize_dependency() }
```
checkRmdMode()
? checkRmdMode
checkRmdMode
scriptLoader
!exists("source_info")
rm(list=ls())
!exists("source_info")
scriptLoader
sync.project()
list.program()
list.programs()
get.sourceInfo()
Sys.getenv()[["RSTUDIO_PANDOC"]]
dir.exists(Sys.getenv()[["RSTUDIO_PANDOC"]])
git.configure
library(adapr)
git.configure
loadAdaprTest()
list.projects()$project.id
get.project.info()
get.project.info
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
runProgram
library(adapr)
runProgram()
library(adapr)
runProgram
library(adapr)
library(adapr)
library(adapr)
run.program()
library(adapr)
library(devtools)
?clean_source
library(adapr)
library(adapr)
makeScript
makeScript
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
library(adapr)
library(adapr)
library(adapr)
show.results()
show.project()
library(adapr)
source('~/Documents/Projects/adapr/R/list_files.R')
source('~/Documents/Projects/adapr/R/list_files.R')
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/get.orchard.R')
source('~/Documents/Projects/adapr/R/get.orchard.R')
fileInfoProject()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
path.expand.2()
path.expand.2("")
path.expand.2("~")
library(adapr)
library(adapr)
get.library
library(adapr)
library(adapr)
library(adapr)
showProject()
showProject
getProject()
showProject <- function(project.id =getProject()){
utils::browseURL(get.project.path(project.id))
}
showProject()
getProject()
library(adapr)
set.project("Weiner_SNP")
showProject()
rm(list=ls())
create_program_graph(getProject())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
git.commit
library(adapr)
library(adapr)
Check.file.hash(pull_source_info("adaprHome")$dependency.dir)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
setProject("Weiner_SNP")
graphProject()
showProject()
showProject <- function(project.id =getProject()){
utils::browseURL(getProjectPath(project.id))
}
showProject()
scriptSubgraph(plotTF = TRUE)
graphProject()
getDepSubgraph("check_model.R")
library(igraph)
getDepSubgraph("check_model.R")
syncTrunk("check_model.R")
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
library(adapr)
getDepSubgraph("check_model.R",plotTF = TRUE)
getDepSubgraph("analyze_missingness.R","N2K",plotTF = TRUE)
setProject("N2K")
list.programs()
listScripts()
source('~/Documents/Projects/adapr/R/list_files.R')
listScripts
listScripts()
getDepSubgraph("analyze_ids_missingness.R","N2K",plotTF = TRUE)
getDepSubgraph("analysis_ids_missingness.R","N2K",plotTF = TRUE)
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
getDepSubgraph("analysis_ids_missingness.R","N2K",plotTF = TRUE)
scriptSubgraph()
scriptSubgraph(TRUE)
scriptSubgraph(plotTF = TRUE)
getDepSubgraph("analysis_ids_missingness.R",plotTF = TRUE)
getDepSubgraph("analysis_ids.R",plotTF = TRUE)
setProject("Weiner_SNP")
graphProject()
getDepSubgraph("graphics_snps.R",plotTF = TRUE)
syncTrunk("graphics_snps.R")
graphProject()
getDepSubgraph("graphics_snps.R",plotTF = TRUE)
getDepSubgraph("fit_imputed_sigmoid.R",plotTF = TRUE)
graphProject()
showProject()
setProject("N2K")
scriptSubgraph()
scriptSubgraph(plotTF = TRUE)
getDepSubgraph("analysis_ids_missingness.R",plotTF = TRUE)
rm(list=ls())
library(adapr)
ls()
listScripts
library(adapr)
getAdaprOptions
getSourceInfo
nchar(NULL)
nchar("")
source('~/Documents/Projects/adapr/R/path_expand.2.R')
source('~/Documents/Projects/adapr/R/path_expand.2.R')
adaprHomeDir()
length(adaprHomeDir())==0
defaultAdaprSetup
plantTree
library(adapr)
get_orchard
get_orchard
print("For custom setup in non-default directories, use R Profile and adaprHomeDir R options: See adaprHomeDir().")
source('~/Documents/Projects/adapr/R/default_setup.R')
? available.packages
where <- if(github!="",repository,"github")
? is.installed
is.installed
?? is.installed
getLibrary
installLibrary
checkVersion
installLibrary
installLibrary
install
.libPaths()
.libPaths()[1]
.Library
.Library.site
library(adapr)
adaprHomeDir()
.libPaths()
?.libPaths
dir.exists(.libPaths())
list.files(.libPaths())
.Library
.libPaths()
list.files(.Library)
temp <- list.files(.Library)
temp <- list.files(.libPaths())
temp0 <- list.files(.Library)
identical(temp,temp0)
setAdaprOptions()
setAdaprOptions
get_orchard
widerOrchard <- data.frame(get_orchard(),project.library=FALSE,library.path="",stringsAsFactors = FALSE)
View(widerOrchard)
source('~/Documents/Projects/adapr/R/get.orchard.R')
source('~/Documents/Projects/adapr/R/get.orchard.R')
updateOrchardLibraries()
getProject()
source('~/Documents/Projects/adapr/R/get_project_path.R')
project.id=getProject()
all.projects <- get_orchard()
if(is.null(project.id)){return(all.projects)}
project.out <- subset(all.projects,all.projects$project.id==project.id)
if(nrow(project.out)!=1){stop("Project.id cannot be used to resolve project path")}
project.id
all.projects <- get_orchard()
projects$project.id
all.projects$project.id
all.projects <- get_orchard()
if(is.null(project.id)){return(all.projects)}
project.out <- subset(all.projects,all.projects$project.id==project.id)
project.out
project.id=getProject()
project.id
all.projects <- get_orchard()
is.null(project.id)
project.out <- subset(all.projects,all.projects$project.id==project.id)
project.out
all.projects <- get_orchard()
subset(all.projects,all.projects$project.id==project.id)
all.projects <- get_orchard()
if(is.null(project.id0)){return(all.projects)}
project.out <- subset(all.projects,all.projects$project.id==project.id0)
project.id0=getProject()
project.id0=getProject()
all.projects <- get_orchard()
if(is.null(project.id0)){return(all.projects)}
project.out <- subset(all.projects,all.projects$project.id==project.id0)
project.out
if(nrow(project.out)!=1){stop("Project.id cannot be used to resolve project path")}
if(as.character(project.out$project.library)=="FALSE"){return("")}
pather <- as.character(project.out$library.path)
(is.na(pather))|(pather=="")
library(adapr)
library(adapr)
library(adapr)
library(adapr)
openProjectList()
? installed.packages
library(adapr)
? with_libpaths
library(withr)
? with_libpaths
? devtools::instll_github
? devtools::install_github
library(adapr)
library(adapr)
? install
getProjectLibrary()
getProjectLibrary
? Library
library(adapr)
initProject("adaprTest1",project.libraryTF = TRUE)
showProject()
showProject
rm(list=ls())
library(adapr)
showProject()
? .libPaths
rm(list=ls())
library(adapr)
source('~/Documents/Projects/adapr/R/Library.R')
library(adapr)
? require
library(adapr)
library(adapr)
? install.packages
install
detach_non_base <- function(){
all_packages <- rownames(installed.packages(lib.loc = .libPaths()))
base_p <- installed.packages()
base_p <- rownames(base_p[ base_p[,"Priority"] %in% c("base","recommended"), c("Package", "Priority")])
remove_these <- all_packages[!(all_packages %in% base_p)]
for(p in remove_these){
detach(paste0('package:',p), unload=TRUE, character.only = TRUE)
}
}
detach_non_base()
detach_non_base()
source('~/Documents/Projects/adapr/R/Library.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
.Platform$r_arch
.Platform
rm(list=ls())
getAdaprOptions()$library
library(adapr)
sessionInfo()
.Platform
names(sessionInfo())
sessionInfo()$platform
make.names(sessionInfo()$platform)
createFileInfo()
createFileInfo
? sessionInfo()
sessionInfo()$Platform
sessionInfo()$platform
? .Platform
Sys.info()
? sessionInfo
pather <- ""
file.path(pather,.Platform$OS.type,gsub("\\.","_",utils::sessionInfo()$platform))
file.path(pather,.Platform$OS.type,gsub("\\-| |\\.","_",utils::sessionInfo()$platform))
file.path(pather,.Platform$OS.type,gsub("\\.","_",make.names(utils::sessionInfo()$platform)))
gsub("\\.","_",make.names(utils::sessionInfo()$platform))
? make.names
? Library
source('~/.active-rstudio-document')
library(adapr)
library(adapr)
loadAdaprTest()
removeProject("adaprTest")
loadAdaprTest()
getAdaprOptions()$project.path
browseURL(getAdaprOptions()$project.path)
zip("/Users/Gelfond/Documents/Projects/adaprTest")
zip("/Users/Gelfond/Documents/Projects/adaprTest")
? zip
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest")
? zip
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest",flags="x")
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest",flags="x")
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest",flags="x")
setwd("/Users/Gelfond/Documents/Projects")
zip("adaprTest.zip",files="adaprTest")
loadAdaprTest()
library(adapr)
loadAdaprTest()
getwd()
list.files("adaprTest",full.names = TRUE)
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE)
lister
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE)
? list.files
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE,all.files = TRUE)
lister
(grep("\\.git",lister,v=1))
file.remove(grep("\\.git",lister,v=1))
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE,all.files = TRUE)
lister
zip("adaprTest.zip",files="adaprTest")
library(adapr)
loadAdaprTest()
getProject()
graphProject()
syncProject()
graphProject()
getProjectLibrary()
setProject
library(adapr)
load_all()
devtools::load_all()
q()
