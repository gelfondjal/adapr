noedges <- ifelse(is.na(previousGraph$edges),TRUE,length(previousGraph$edges)==0)
source('~/Documents/Projects/adapr/R/rapidPlot.R')
syncProject()
rapidPlot
devtools::load_all()
library(adapr)
syncProject()
setProject("adaprTest")
graphProject()
listProjects("adaprTest")
openScript()
graphProject()
syncProject()
graphData <- graphProject("test1235")
rapidPlot(graphData)
q()
library(adapr)
ls()
rm(list=ls())
library(adapr)
setProject("test1235")
graphProject()
syncProject()
makeScript("test2.R")
temp <- graphProject()
rapidPlot(temp)
setProject("adaprTest")
graphProject()
showProject()
syncTestProject()
project.id <- getProject()
source_info <- pullSourceInfo(project.id)
project_info <- getProjectInfoSI(source_info)
project_info
dagger <- project_info$graph
tree <- project_info$tree
plotl=FALSE
syncTest(dagger,tree,TRUE)
if(!igraph::is.dag(dagger)){stop("The computing dependencies have cycles.")}
# track the run time of source files
# track the modification time of target files
igraph::V(dagger)$time <- ifelse(igraph::V(dagger)$file.class=="source",igraph::V(dagger)$run.time,igraph::V(dagger)$mod.time)
file.info <- condenseFileInfo(tree)
# find the out dated nodes
file.check <- checkFileMtimeSource(dependency.object=tree)
# vertices to update
vertex.updates <- c()
file.check
file.info
dependency.object <- file.info
view(file.info)
View(file.info)
trees <- dependency.object
source.df <- subset(trees,!duplicated(trees$source.hash))
source.mtime.check <- plyr::ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1]))$mtime
})
mtime.fail <- as.character(current.mtime)  != as.character(x$source.mod.time   )
return(data.frame( mtime.fail))
})
source.mtime.check
failed.sources <- subset(source.mtime.check,source.mtime.check$mtime.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
source.df <- subset(trees,!duplicated(trees$source.hash))
source.mtime.check <- plyr::ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1]))$mtime
})
mtime.fail <- as.character(current.mtime)  != as.character(x$source.mod.time   )
return(data.frame( mtime.fail))
})
source.mtime.check
failed.sources <- subset(source.mtime.check,source.mtime.check$mtime.fail)
source.mtime.check$mtime.fail
source.df <- subset(trees,!duplicated(trees$source.hash))
source.df
trees <- dependency.object
trees
source.df <- subset(trees,!duplicated(trees$source.hash))
source.df
head(trees)
names(trees)
tree
dependency.object <- tree
trees <- tree
names(trees)
head(source.hash)
source.df <- subset(trees,!duplicated(trees$source.hash))
source.df
source.mtime.check <- plyr::ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1]))$mtime
})
mtime.fail <- as.character(current.mtime)  != as.character(x$source.mod.time   )
return(data.frame( mtime.fail))
})
source.mtime.check
failed.sources <- subset(source.mtime.check,source.mtime.check$mtime.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
target.mtime.check <- plyr::ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
currrent.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$target.path[1],x$target.file[1]))$mtime
})
# Only gets 1 second level time resoluion, some OS may achieve more resolution
x$mtime.fail <- as.character(current.mtime)  != as.character(x$target.mod.time)
return(x)
})
target.mtime.check
target.mtime.check <- plyr::ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
currrent.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$target.path[1],x$target.file[1]))$mtime
})
# Only gets 1 second level time resoluion, some OS may achieve more resolution
x$mtime.fail <- as.character(current.mtime)  != as.character(x$target.mod.time)
x$mtime.fail <- ifelse(is.na(x$mtime.fail),TRUE,x$mtime.fail)
return(x)
})
target.mtime.check
failed.targets <- subset(target.mtime.check,target.mtime.check$mtime.fail)
failed.targets
source.mtime.check <- plyr::ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1]))$mtime
})
mtime.fail <- as.character(current.mtime)  != as.character(x$source.mod.time   )
mtime.fail <- ifelse(is.na(mtime.fail),TRUE,mtime.fail)
return(data.frame( mtime.fail))
})
source.mtime.check
source.hash.check <- plyr::ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
source.hash.check
missingIsTrue <- function(x){return(ifelse(is.na(x),TRUE,x))}
source.hash.check <- plyr::ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- missingIsTrue(current.hash != x$source.hash)
return(data.frame(hash.fail))
})
source.hash.check
target.hash.check <- plyr::ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$target.path[1],x$target.file[1]),serialize=FALSE)
})
x$hash.fail <- current.hash != x$target.hash
return(x)
})
target.hash.check
target.hash.check <- plyr::ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$target.path[1],x$target.file[1]),serialize=FALSE)
})
x$hash.fail <- missingIsTrue(current.hash != x$target.hash)
return(x)
})
target.hash.check
library(adapr)
graphProject("adaprTest")
syncProject()
graphProject("adaprTest")
rm(list=ls()
)
ls()
library(adapr)
library(adapr)
ls()
library(adapr)
? adaprDependencies
devtools::load_all()
library(adapr)
? adaprDependencies
? adaprDependencies
library(adapr)
library(adapr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"pre_pilot_analysis.R"
project.id <- "Ramirez_435_CHEF"
source_info <- create_source_file_dir(source.description="analyzing pre pilot data pre post analysis")
Library("reshape2")
Library("plyr")
Library("ltm")
Library("reshape2")
Library("VennDiagram")
Library("venneuler")
# Program body here
# deleted 29692 2nd pre test (7/6/2017)
pilot <- Read("pre_pilot_data.csv")
summary(pilot)
pilot[pilot=='skipped'] <- NA
match_df <- ddply(pilot,'student..',function(x){
print(x$student..)
if((nrow(subset(x,pre_post=='pre'))>0) & (nrow(subset(x,pre_post=='post'))>0)){
matching <- (subset(x,pre_post=='pre',select=c('q1','q2','q3','q4','q5','q6','q7','q8','q9','q10','q11','q12','q13','q14','q15'))== subset(x,pre_post=='post',select=c('q1','q2','q3','q4','q5','q6','q7','q8','q9','q10','q11','q12','q13','q14','q15')))*1
}else{
matching <- data.frame(matrix(NA,ncol=15))
names(matching) <- c('q1','q2','q3','q4','q5','q6','q7','q8','q9','q10','q11','q12','q13','q14','q15')
}
return(data.frame(matching))
})
match_df$numb_match <- rowSums(match_df[,-1])
match_df$pct_match <- round(match_df$numb_match/15,3)*100
ana_data <- subset(pilot,student.. %in% match_df[which(!is.na(match_df$numb_match)),]$student..,select=c('student..','pre_post','q1','q2','q3','q4','q5'))
# Question 1 --> C
ana_data$q1 <- ifelse(ana_data$q1=="C",1,0)
# Question 2 --> C
ana_data$q2 <- ifelse(ana_data$q2=="C",1,0)
# Question 3 --> B
ana_data$q3 <- ifelse(ana_data$q3=="B",1,0)
# Question 4 --> B
ana_data$q4 <- ifelse(ana_data$q4=="B",1,0)
# Question 5 --> C
ana_data$q5 <- ifelse(ana_data$q5=="C",1,0)
ana_data$sum_correct <- rowSums(ana_data[,c(3:7)])
ana_out <- ddply(ana_data,'student..',function(x){
print(x$student..)
return(reshape(x,timevar='pre_post',idvar='student..',direction='wide'))
})
ana_out$sum_correct.post-ana_out$sum_correct.pre
pre <- subset(pilot,pre_post=='pre')
post <- subset(pilot,pre_post=='post')
# Item Difficulty
post$q1 <- droplevels(post$q1)
post$q2 <- droplevels(post$q2)
post$q3 <- droplevels(post$q3)
post$q4 <- droplevels(post$q4)
post$q5 <- droplevels(post$q5)
item_diff <- NULL
for(item in c('q1','q2','q3','q4','q5')){
item_diff[[item]] <- data.frame(response=names(table(post[[item]])),frequency=as.numeric(table(post[[item]])),percent=round(as.numeric(table(post[[item]]))/nrow(post),3)*100)
}
# Item Discrimination PBI
# Question 1 --> C
itemdiff <- subset(post,select=c('student..','pre_post','q1','q2','q3','q4','q5'))
itemdiff$q1 <- ifelse(itemdiff$q1=="C",1,0)
# Question 2 --> C
itemdiff$q2 <- ifelse(itemdiff$q2=="C",1,0)
# Question 3 --> B
itemdiff$q3 <- ifelse(itemdiff$q3=="B",1,0)
# Question 4 --> B
itemdiff$q4 <- ifelse(itemdiff$q4=="B",1,0)
# Question 5 --> C
itemdiff$q5 <- ifelse(itemdiff$q5=="C",1,0)
itemdiff$total_score <- rowSums(itemdiff[,-c(1,2)],na.rm=TRUE)
St <- sd(itemdiff$total_score)
r_pbi <- NULL
for(item in c('q1','q2','q3','q4','q5')){
Mp <- mean(itemdiff$total_score[which(itemdiff[[item]]==1)])
Mq <- mean(itemdiff$total_score[which(itemdiff[[item]]==0)])
p <- length(which(itemdiff[[item]]==1))/nrow(itemdiff)
q <- length(which(itemdiff[[item]]==0))/nrow(itemdiff)
r_pbi[[item]] <- ((Mp-Mq)/St)*sqrt(p*q)
}
item_bis <- na.omit(itemdiff)
DT::datatable(ana_out, rownames = FALSE, options=list(pageLength=15))
data.frame(student=ana_out$student..,diff=ana_out$sum_correct.post-ana_out$sum_correct.pre)
sum(ana_out$sum_correct.post-ana_out$sum_correct.pre)
pre <- subset(pilot,pre_post=='pre')
post <- subset(pilot,pre_post=='post')
# Item Difficulty
post$q1 <- droplevels(post$q1)
post$q2 <- droplevels(post$q2)
post$q3 <- droplevels(post$q3)
post$q4 <- droplevels(post$q4)
post$q5 <- droplevels(post$q5)
post$q6 <- droplevels(post$q6)
post$q7 <- droplevels(post$q7)
post$q8 <- droplevels(post$q8)
post$q9 <- droplevels(post$q9)
post$q10 <- droplevels(post$q10)
post$q11 <- droplevels(post$q11)
post$q12 <- droplevels(post$q12)
post$q13 <- droplevels(post$q13)
post$q14 <- droplevels(post$q14)
post$q15 <- droplevels(post$q15)
item_diff <- NULL
for(item in c('q1','q2','q3','q4','q5')){
item_diff[[item]] <- data.frame(response=names(table(post[[item]])),frequency=as.numeric(table(post[[item]])),percent=round(as.numeric(table(post[[item]]))/nrow(post),3)*100)
}
# Item Discrimination PBI
# Question 1 --> C
itemdiff <- subset(post,select=c('student..','pre_post','q1','q2','q3','q4','q5'))
itemdiff$q1 <- ifelse(itemdiff$q1=="C",1,0)
# Question 2 --> C
itemdiff$q2 <- ifelse(itemdiff$q2=="C",1,0)
# Question 3 --> B
itemdiff$q3 <- ifelse(itemdiff$q3=="B",1,0)
# Question 4 --> B
itemdiff$q4 <- ifelse(itemdiff$q4=="B",1,0)
# Question 5 --> C
itemdiff$q5 <- ifelse(itemdiff$q5=="C",1,0)
itemdiff$total_score <- rowSums(itemdiff[,-c(1,2)],na.rm=TRUE)
St <- sd(itemdiff$total_score)
r_pbi <- NULL
for(item in c('q1','q2','q3','q4','q5')){
Mp <- mean(itemdiff$total_score[which(itemdiff[[item]]==1)])
Mq <- mean(itemdiff$total_score[which(itemdiff[[item]]==0)])
p <- length(which(itemdiff[[item]]==1))/nrow(itemdiff)
q <- length(which(itemdiff[[item]]==0))/nrow(itemdiff)
r_pbi[[item]] <- ((Mp-Mq)/St)*sqrt(p*q)
}
item_bis <- na.omit(itemdiff)
item_diff[['q1']]
biserial.cor(item_bis$total_score, item_bis[['q1']],level=2)
item_diff[['q2']]
biserial.cor(item_bis$total_score, item_bis[['q2']],level=2)
item_diff[['q3']]
biserial.cor(item_bis$total_score, item_bis[['q3']],level=2)
item_diff[['q4']]
biserial.cor(item_bis$total_score, item_bis[['q4']],level=2)
item_diff[['q5']]
biserial.cor(item_bis$total_score, item_bis[['q5']],level=2)
item_diff2 <- NULL
for(item in paste0('q',6:15)){
item_diff2[[item]] <- data.frame(response=names(table(post[[item]])),frequency=as.numeric(table(post[[item]])),percent=round(as.numeric(table(post[[item]]))/nrow(post),3)*100)
}
item_diff[['q1']]
biserial.cor(item_bis$total_score, item_bis[['q1']],level=2)
item_diff[['q2']]
biserial.cor(item_bis$total_score, item_bis[['q2']],level=2)
item_diff[['q3']]
biserial.cor(item_bis$total_score, item_bis[['q3']],level=2)
item_diff[['q4']]
biserial.cor(item_bis$total_score, item_bis[['q4']],level=2)
item_diff[['q5']]
biserial.cor(item_bis$total_score, item_bis[['q5']],level=2)
item_diff2[['q6']]
item_diff2[['q7']]
item_diff2[['q8']]
item_diff2[['q9']]
item_diff2[['q10']]
item_diff2[['q11']]
item_diff2[['q12']]
item_diff2[['q13']]
item_diff2[['q14']]
item_diff2[['q15']]
# Item Difficulty
pre$q1 <- droplevels(pre$q1)
pre$q2 <- droplevels(pre$q2)
pre$q3 <- droplevels(pre$q3)
pre$q4 <- droplevels(pre$q4)
pre$q5 <- droplevels(pre$q5)
pre$q6 <- droplevels(pre$q6)
pre$q7 <- droplevels(pre$q7)
pre$q8 <- droplevels(pre$q8)
pre$q9 <- droplevels(pre$q9)
pre$q10 <- droplevels(pre$q10)
pre$q11 <- droplevels(pre$q11)
pre$q12 <- droplevels(pre$q12)
pre$q13 <- droplevels(pre$q13)
pre$q14 <- droplevels(pre$q14)
pre$q15 <- droplevels(pre$q15)
item_diff_pre <- NULL
for(item in c('q1','q2','q3','q4','q5')){
item_diff_pre[[item]] <- data.frame(response=names(table(pre[[item]])),frequency=as.numeric(table(pre[[item]])),percent=round(as.numeric(table(pre[[item]]))/nrow(pre),3)*100)
}
# Item Discrimination PBI
# Question 1 --> C
itemdiffpre <- subset(pre,select=c('student..','pre_post','q1','q2','q3','q4','q5'))
itemdiffpre$q1 <- ifelse(itemdiffpre$q1=="C",1,0)
# Question 2 --> C
itemdiffpre$q2 <- ifelse(itemdiffpre$q2=="C",1,0)
# Question 3 --> B
itemdiffpre$q3 <- ifelse(itemdiffpre$q3=="B",1,0)
# Question 4 --> B
itemdiffpre$q4 <- ifelse(itemdiffpre$q4=="B",1,0)
# Question 5 --> C
itemdiffpre$q5 <- ifelse(itemdiffpre$q5=="C",1,0)
itemdiffpre$total_score <- rowSums(itemdiffpre[,-c(1,2)],na.rm=TRUE)
item_bis_pre <- na.omit(itemdiffpre)
item_diff_pre2 <- NULL
for(item in paste0('q',6:15)){
item_diff_pre2[[item]] <- data.frame(response=names(table(pre[[item]])),frequency=as.numeric(table(pre[[item]])),percent=round(as.numeric(table(pre[[item]]))/nrow(pre),3)*100)
}
item_diff_pre[['q1']]
biserial.cor(item_bis_pre$total_score, item_bis_pre[['q1']],level=2)
item_diff_pre[['q2']]
biserial.cor(item_bis_pre$total_score, item_bis_pre[['q2']],level=2)
item_diff_pre[['q3']]
biserial.cor(item_bis_pre$total_score, item_bis_pre[['q3']],level=2)
item_diff_pre[['q4']]
biserial.cor(item_bis_pre$total_score, item_bis_pre[['q4']],level=2)
item_diff_pre[['q5']]
biserial.cor(item_bis_pre$total_score, item_bis_pre[['q5']],level=2)
item_diff_pre2[['q6']]
item_diff_pre2[['q7']]
item_diff_pre2[['q8']]
item_diff_pre2[['q9']]
item_diff_pre2[['q10']]
item_diff_pre2[['q11']]
item_diff_pre2[['q12']]
item_diff_pre2[['q13']]
item_diff_pre2[['q14']]
item_diff_pre2[['q15']]
match_df
head(pilot)
dim(pilot)
preids <- subset(pilot,pre_post=="pre")$student..
postids <- subset(pilot,pre_post=="pre")$student..
preids <- subset(pilot,pre_post=="pre")$student..
postids <- subset(pilot,pre_post=="pre")$student..
venn.diagram(list("Pre"=preids,"Post"=postids),
filename=file.path(source_info$results.dir,"prepost.tiff"),cat.cex=0.75,
alpha = c(0.5, 0.5),fill=c("red","blue"),main="Student IDs Pre and Post",height=1000,width=1000,resolution=250,margin=0.05)
showResults()
preids <- subset(pilot,pre_post=="pre")$student..
postids <- subset(pilot,pre_post=="post")$student..
venn.diagram(list("Pre"=preids,"Post"=postids),
filename=file.path(source_info$results.dir,"prepost.tiff"),cat.cex=0.75,
alpha = c(0.5, 0.5),fill=c("red","blue"),main="Student IDs Pre and Post",height=1000,width=1000,resolution=250,margin=0.05)
pilot
intersect(preids,postids)
length(intersect(preids,postids))
65+17+28
table(table(pilot$student..))
View(pilot)
sum(duplicated(preids))
sum(duplicated(postids))
17/(65+17)
getProject()
makeScript("meeting_2017_12_6.R","prelim analyis of pre/post study")
openScript("meeting_2017_12_6.Rmd")
showProject()
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
graphProject("adaprTest")
library(adapr)
graphProject("adaprTest")
graphProject("adaprTest",FALSE)
graphProject("adaprTest",TRUE)
graphProject("adaprTest",FALSE)
graphProject("N2K",FALSE)
graphProject("adaprTest",TRUE)
graphProject("N2K",TRUE)
setProject("N2K")
listScripts()
listScripts()$last.run.time.sec
sum(listScripts()$last.run.time.sec)
library(adapr)
adaprUpdate
checkRmdMode()
library(adapr)
loadAdaprTest
Digest("system.file("adaprTest.zip", package = "adapr"))
Digest(system.file("adaprTest.zip", package = "adapr"))
Digest(system.file("adaprTest.zip", package = "adapr"),file=TRUE)
Digest(file=system.file("adaprTest.zip", package = "adapr"))
source('~/Documents/Projects/adapr/R/guress_read_fcn.R')
identical(utils::read.csv,guess.read.fcn("data.csv"))
idPackages()
library(adapr)
library(adapr)
makeHyperlink("myPath","click here to my path")
library(adapr)
library(adapr)
library(adapr)
devtools::load_all(".")
library(adapr)
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
scriptSubgraph("N2K",plotTF = 1)
temp <- scriptSubgraph("N2K",plotTF = 1)
temp
names(temp)
plot(temp$subgraph)
plot(temp$subgraph,layout=layout)
plot(temp$subgraph)
plot(temp$subgraph,layout(layout))
plot(temp$subgraph,layout=layout_sujiyama)
?? sujiyama
plot(temp$subgraph,layout=layout_with_sugiyama)
plot(temp$subgraph,layout=layout_with_sugiyama())
? layout_with_sugiyama
plot(temp$subgraph,layout=layout_with_sugiyama(temp$subgraph))
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph))
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout)
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout,vertex.labels.color=NA)
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout,vertex.labels.color="blue")
plot(temp$subgraph,layout=igraph::layout_with_sugiyama(temp$subgraph)$layout,vertex.labels.color="black")
library(adapr)
makeRelativeHyperlink("myPath","myPath/pathToFile","click here to my path")
ls()
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
