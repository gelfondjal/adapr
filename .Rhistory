librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed$Version <- as.character(installed$Version)
librarydf$Version <- as.character(librarydf$version)
installcheck$Version[1] == x$Version[1]
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installed <- nrow(installcheck)!=0
installcheck <- subset(installed,Package==x$Package[1])
installed <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
data.frame(installed=installedTF,versionMatch)
})
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed$Version <- as.character(installed$Version)
librarydf$Version <- as.character(librarydf$version)
x <- librarydf[12,]
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,installed$Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
data.frame(installed=installedTF,versionMatch)
})
installout
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,installed$Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
return(data.frame(installed=installedTF,version=x$Version[1],versionMatch,repos=x$source))
})
installout
table(installout$repos)
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType <- ifelse(grepl("^cran",tolower(installout$repos)),"cran",installout$repoType)
installout$repoType
subset(installout,is.na(repoType))
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType <- ifelse(grepl("^cran",tolower(installout$repos)),"cran",installout$repoType)
installout$repoType <- ifelse(grepl("^local",tolower(installout$repos)),"local",installout$repoType)
installout$repoType
?devtools::install_cran()
?install_cran()
install_version("survival")
library(devtools)
install_version("survival")
source("http://bioconductor.org/biocLite.R")
tempfcn <- get("biocLite")
? biocLite
load.install.library.file
get.library
temp <- get.library()
head(temp)
source('~/.active-rstudio-document')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
data.frame(one=NULL)
data.frame(one=NULL)$one[1]
NULL | TRUE
rownames(installed.packages()
)
packageVersion("XML")
packageVersion("XML")=="3.98.1.9"
? install.versions
packageVersion("sfa")
checkVersion <- function(package0,version0,versionCheck){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- packageVersion(package0)
}
return(packageTRUE)
}
checkVersion <- function(package0,version0="",versionCheck=FALSE){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- packageVersion(package0)
}
return(packageTRUE)
}
checkVersion("ggplot2")
checkVersion("ggplot2","asdf",TRUE)
temp <- checkVersion("ggplot2","asdf",TRUE)
temp
checkVersion <- function(package0,version0="",versionCheck=FALSE){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- packageVersion(package0)==version0
}
return(packageTRUE)
}
temp <- checkVersion("ggplot2","asdf",TRUE)
temp <- packageVersion(package0)
temp <- packageVersion("ggplot2")
temp
class(temp)
as.character(temp)
checkVersion <- function(package0,version0="",versionCheck=FALSE){
installed <- installed.packages()
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- as.character(packageVersion(package0))==version0
}
return(packageTRUE)
}
temp <- checkVersion("ggplot2","asdf",TRUE)
temp
temp <- checkVersion("ggplot2s","asdf",FALSE)
tmep
temp
checkVersion("ggplot2","asdf",FALSE)
checkVersion("ggplot2","2.2.1",FALSE)
checkVersion("ggplot2","2.2.1",TRUE)
install <- function(package,version=NULL,installVersion=FALSE,lib=.libPaths()[1],repos='cran',show.available=FALSE,...){
if(!('versions' %in% installed.packages()[,'Package'])){
install.packages('versions')
}
if(repos=='cran'){
# Show available versions of the package
if(show.available){
print(versions::available.versions(package)[[package]])
}
# Install package no version specified (default is to use the most current version)
if(!installVersion){
utils::install.packages(package)
#versions::install.versions(package, versions::available.versions(package)[[package]][1,1], lib=lib)
}
# Install package with version specified
else if(installVersion){
versions::install.versions(package, version, lib=lib,...)
}
if(package %in% installed.packages()[,'Package']){
cat(paste0("Package '",package,"' successfully installed!\n"))
}else{
cat(paste0("Installation failed!\n"))
}
}
# Install bioconductor package
else if(repos=="bioc"){
if(!exists("biocLite")){
source("http://bioconductor.org/biocLite.R")
}
tempfcn <- get("biocLite")
tempfcn(package,ask=TRUE)
cat(paste0("Package ",package," successfully installed!\n"))
}else{
cat(paste0("Install error: Failed for package ",package))
}
}
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
? install.packages
? installed.packages
get.library()
source('~/Documents/Projects/adapr/R/list_files.R')
get.library()
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
library(adapr)
get.library()
get.library <- function(project.id = get.project()){
programs <- list.programs(project.id)
path <- get.project.path(project.id)
packageInfo <- plyr::ddply(programs,"source.file",function(program){
results.dir <- file.path(path,adapr::project.directory.tree$results,program$source.file[1])
packages <- file.path(results.dir,paste0("Session_info_",gsub("\\.","_",program$source.file[1]),".RObj"))
#print(packages)
load(file=packages)
out <- obj$packages
return(out)
})
packageInfo$repos <- tolower(substring(packageInfo$source,1,4))
# packageInfo <- subset(packageInfo,!duplicated(package))
return(packageInfo)
}
get.library()
set.project("Weiner_SNP")
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
dim(get.library())
? packageVersion
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages()
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
checkVersion <- function(package0,version0="",versionCheck=FALSE,lib=.libPaths()[1]){
installed <- installed.packages(lib)
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- as.character(packageVersion(package0,lib))==version0
}
return(packageTRUE)
}
checkVersion("Hmisc")
checkVersion("Hmisc","4.0-3",TRUE)
package_version("Hmisc")
packageVersion("Hmisc")
install.packages("Hmisc")
packageVersion("Hmisc")
as.character(packageVersion("Hmisc"))
get.library
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
packageVersion(Formula)
packageVersion("Formula")
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install_multiple_packages(versionCheck = TRUE)
temp <- install_multiple_packages(versionCheck = TRUE)
subset(temp,temp$success==FALSE)
versions::install.versions(git2r, version="0.18.0")
versions::install.versions("git2r", version="0.18.0")
temp <- install_multiple_packages(versionCheck = TRUE)
install("git2r","0.18.0",TRUE)
checkVersion <- function(package0,version0="",versionCheck=FALSE,lib=.libPaths()[1]){
installed <- installed.packages(lib)
packageTRUE <- package0 %in% rownames(installed)
if(versionCheck&packageTRUE){
packageTRUE <- gsub("\\-","\\.",as.character(packageVersion(package0,lib)))==gsub("\\-","\\.",version0)
}
return(packageTRUE)
}
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library()
install.library(versionCheck = TRUE
)
install("Formula","1.2-1",installVersion = TRUE)
install.library()
install.library(versionCheck = TRUE)
? install.packages
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library(versionCheck = TRUE)
temp <- install.library(versionCheck = TRUE)
subset(temp,package=="tableone")
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck = TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck = TRUE)
temp
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
install.library(versionCheck=TREU)
install.library(versionCheck=TRUE)
temp <- install.library(versionCheck=TRUE)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
temp <- install.library(versionCheck=TRUE)
temp$success
library(adapr)
?packageVersion()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
library(adapr)
? packageVersion
? packageVersion
library(adapr)
library(adapr)
library(adapr)
library(adapr)
get.library()
set.project()
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library(0)
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
get.library <- function(project.id = get.project()){
programs <- list.programs(project.id)
path <- get.project.path(project.id)
packageInfo <- plyr::ddply(programs,"source.file",function(program){
results.dir <- file.path(path,adapr::project.directory.tree$results,program$source.file[1])
packages <- file.path(results.dir,paste0("Session_info_",gsub("\\.","_",program$source.file[1]),".RObj"))
#print(packages)
redd <- FALSE
try({
out <- readRDS(file=packages)$packages
})
if(!exists("out")){
load(file=packages)
if(!exists("obj")){obj <- NULL}
out <- obj$packages
}
return(out)
})
packageInfo$repos <- tolower(substring(packageInfo$source,1,4))
packageInfo <- subset(packageInfo,!duplicated(packageInfo$package))
return(packageInfo)
}
get.library()
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
get.library()
sync.project()
show.project()
graph.project()
list.projects()$project.id
set.project("adaprTest")
set.project("adaprTest",1)
list.project()
list.projects()
get.library()
get.library()
list.projects()$project.id
set.project("Macias_352")
get.library()
get.sourceInfo()
library(adapr)
ls()
get.sourceInfo()
library(adapr)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
get.sourceInfo
git.add
load.source.directory
load.install.library.file
library(adapr)
get.project()
set.project()
set.project("adaprHome")
set.project("adaprHomefdsa")
set.project("adaprHome")
make.program("testabs.R")
show.project()
source('~/Documents/Projects/adaprHome/Programs/testabs.R')
show.results()
require("adapr")
require("methods")
paste0("Created on ",(Sys.time() ))
# scriptLoader("adaprHome","testabs.R")
hist(rnorm(12000))
if(checkRmdMode()){dependency.out <- finalize_dependency() }
show.results()
get.sourceInfo()
run.proj
run.program()
checkRmdMode()
checkRmdMode()
require("adapr")
require("methods")
paste0("Created on ",(Sys.time() ))
scriptLoader("adaprHome","testabs.R")
hist(rnorm(1000000))
if(checkRmdMode()){dependency.out <- finalize_dependency() }
---
title: "adaprHome testabs.Rmd: "
author: "gelfond@somewhere.com"
output: html_document
---
```{r,echo=FALSE,message=FALSE,warning=FALSE,include=FALSE}
require("adapr")
require("methods")
paste0("Created on ",(Sys.time() ))
```
```{r,echo=FALSE,message=FALSE,warning=FALSE,include=FALSE}
scriptLoader("adaprHome","testabs.R")
```
#Check out my histogram
```{r}
hist(rnorm(1000000))
```
```{r,echo=FALSE}
if(checkRmdMode()){dependency.out <- finalize_dependency() }
```
checkRmdMode()
? checkRmdMode
checkRmdMode
scriptLoader
!exists("source_info")
rm(list=ls())
!exists("source_info")
scriptLoader
sync.project()
list.program()
list.programs()
get.sourceInfo()
Sys.getenv()[["RSTUDIO_PANDOC"]]
dir.exists(Sys.getenv()[["RSTUDIO_PANDOC"]])
git.configure
library(adapr)
git.configure
loadAdaprTest()
list.projects()$project.id
get.project.info()
get.project.info
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
runProgram
library(adapr)
runProgram()
library(adapr)
runProgram
library(adapr)
library(adapr)
library(adapr)
run.program()
library(adapr)
library(devtools)
?clean_source
library(adapr)
library(adapr)
makeScript
makeScript
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
library(adapr)
library(adapr)
library(adapr)
show.results()
show.project()
library(adapr)
source('~/Documents/Projects/adapr/R/list_files.R')
source('~/Documents/Projects/adapr/R/list_files.R')
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/get.orchard.R')
source('~/Documents/Projects/adapr/R/get.orchard.R')
fileInfoProject()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
path.expand.2()
path.expand.2("")
path.expand.2("~")
library(adapr)
library(adapr)
get.library
library(adapr)
library(adapr)
library(adapr)
showProject()
showProject
getProject()
showProject <- function(project.id =getProject()){
utils::browseURL(get.project.path(project.id))
}
showProject()
getProject()
library(adapr)
set.project("Weiner_SNP")
showProject()
rm(list=ls())
create_program_graph(getProject())
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
git.commit
library(adapr)
library(adapr)
Check.file.hash(pull_source_info("adaprHome")$dependency.dir)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
