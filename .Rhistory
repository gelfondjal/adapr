tex.dir <- file.path(results.dir,project.directory.tree$tex.dir) # Publication quality output
dependency.dir <- file.path(project.path,project.tree$dependency.dir)
support.dir <- file.path(project.path,project.tree$support)
library.dir <- file.path(support.dir,project.tree$library.bank)
source.support.dir <- file.path(support.dir,gsub("\\.(R|r)$","_R",source.file0))
apps.dir <- file.path(support.dir,"Apps")
markdown.dir <- file.path(analysis.dir,"Markdown")
project.tree <- project.directory.tree
if(!grepl("\\.R$|\\.r$",source.file0)){stop(paste("Project",project.id0,"Source file",source.file0,"not an R file extension"))}
if(!file.exists(file.path(analysis.dir,source.file0))){stop(paste("Project",project.id0,"Source file",source.file0,"does not exist in program directory"))}
# Create necessary directories
apply(matrix(c(analysis.dir,data.dir,results.dir,tex.dir,dependency.dir,support.dir,library.dir,apps.dir,source.support.dir,markdown.dir   )),1,dir.create,showWarnings=FALSE,recursive=TRUE)
source.file.info <- Create.file.info(analysis.dir,source.file0,description=source.description)
source_info <- list(analysis.dir=analysis.dir,data.dir=data.dir,tex.dir=tex.dir,results.dir=results.dir,support.dir = support.dir,library.dir=library.dir,
dependency.dir=dependency.dir,file=source.file.info,source.support.dir=source.support.dir,markdown.dir=markdown.dir,support.library.file="common_libs.csv")
source_info$project.id <- project.id0
source_info$project.path <- project.path
source_info$options <- get_adapr_options(TRUE)
try({
treedf <- Harvest.trees(dependency.dir)
not.this.source <- subset(treedf,(treedf$source.file!=source_info$file[["file"]])&(!is.na(dependency)))
if (nrow(not.this.source)){source_info$all.files<- Condense.file.info(not.this.source)}
},silent=TRUE)
source_info$dependency.file <- paste(source.file.info[2],".txt",sep="")
source_info$git.path <- source_info$options$git.path
source_info$git.log <- ifelse(is.null(source_info$options$git),TRUE,source_info$options$git=="TRUE")
# create depedency ref class instance
source_info$dependency <- dependency(data= data.frame())
source_info$options$git <- ifelse(is.null(source_info$options$git),TRUE,source_info$options$git=="TRUE")
project.id0 <- project.id
source.file0 <- "read_data.R"
set.project(project.id0,TRUE)
project.path <- get.project.path(project.id0)
project.tree <- project.directory.tree
analysis.dir <- file.path(project.path,project.tree$analysis) # where the programs are
data.dir <- file.path(project.path,project.tree$data)  # where the data are
results.dir <- file.path(project.path,project.tree$results,source.file0) # Standard output
tex.dir <- file.path(results.dir,project.directory.tree$tex.dir) # Publication quality output
dependency.dir <- file.path(project.path,project.tree$dependency.dir)
support.dir <- file.path(project.path,project.tree$support)
library.dir <- file.path(support.dir,project.tree$library.bank)
source.support.dir <- file.path(support.dir,gsub("\\.(R|r)$","_R",source.file0))
apps.dir <- file.path(support.dir,"Apps")
markdown.dir <- file.path(analysis.dir,"Markdown")
project.tree <- project.directory.tree
if(!grepl("\\.R$|\\.r$",source.file0)){stop(paste("Project",project.id0,"Source file",source.file0,"not an R file extension"))}
if(!file.exists(file.path(analysis.dir,source.file0))){stop(paste("Project",project.id0,"Source file",source.file0,"does not exist in program directory"))}
# Create necessary directories
apply(matrix(c(analysis.dir,data.dir,results.dir,tex.dir,dependency.dir,support.dir,library.dir,apps.dir,source.support.dir,markdown.dir   )),1,dir.create,showWarnings=FALSE,recursive=TRUE)
source.file.info <- Create.file.info(analysis.dir,source.file0,description=source.description)
source_info <- list(analysis.dir=analysis.dir,data.dir=data.dir,tex.dir=tex.dir,results.dir=results.dir,support.dir = support.dir,library.dir=library.dir,
dependency.dir=dependency.dir,file=source.file.info,source.support.dir=source.support.dir,markdown.dir=markdown.dir,support.library.file="common_libs.csv")
source_info$project.id <- project.id0
source_info$project.path <- project.path
source_info$options <- get_adapr_options(TRUE)
try({
treedf <- Harvest.trees(dependency.dir)
not.this.source <- subset(treedf,(treedf$source.file!=source_info$file[["file"]])&(!is.na(dependency)))
if (nrow(not.this.source)){source_info$all.files<- Condense.file.info(not.this.source)}
},silent=TRUE)
source_info$dependency.file <- paste(source.file.info[2],".txt",sep="")
source_info$git.path <- source_info$options$git.path
source_info$git.log <- ifelse(is.null(source_info$options$git),TRUE,source_info$options$git=="TRUE")
# create depedency ref class instance
source_info$dependency <- dependency(data= data.frame())
source_info$options$git <- ifelse(is.null(source_info$options$git),TRUE,source_info$options$git=="TRUE")
source_info_arg  <- source_info
source.file.info <- source_info_arg$file
project.path <- source_info_arg$project.path
project.id <- source_info_arg$project.id
dependency.path <- source_info_arg$dependency.dir
dependency.file <- file.path(source_info_arg$dependency.dir,source_info_arg$dependency.file)  #file.path(dependency.path,paste(source.file.info[2],".txt",sep=""))
dependency.out <- data.frame(source.file.path=source.file.info[["path"]],source.file=source.file.info[["file"]],source.file.description=source.file.info[["description"]],
source.run.time=as.POSIXct(Sys.time(),tz = Sys.timezone()),
path=dependency.path,project.path=project.path,project.id=project.id,
target.path=NA,
target.file=NA,
dependency=NA,
target.description=NA,
stringsAsFactors=FALSE)
source_info_arg$dependency$update(dependency.out)
source_info_arg$options$git
no.repository <- TRUE
try({
no.repository <- (0==length(git2r::commits(git2r::repository(project.path))))
})
no.repository
git2r::init(project.path)
git.add(project.path,file.path(source.file.info[["path"]],source.file.info[["file"]]))
commit.project(project.id ,"Initialize git")
source.file.info[["path"]]
commit.message=""
source_info <- pull_source_info(project.id)
test.sync0 <- sync.test.si(source_info)$synchronized
synccheck <- ifelse(test.sync0,"SYNCHRONIZED","NOT SYNCd")
setwd(source_info$project.path)
repo <- git2r::repository(source_info$project.path)
analysis.dir <- file.path(source_info$project.path,project.directory.tree$analysis)
all.programs <- matrix(list.files(analysis.dir,recursive=TRUE,full.names=TRUE))
add <-  apply(all.programs,1,function(x){git.add(source_info$project.path,filename=x)})
committed <- git2r::commit(repo,message =paste(synccheck,commit.message))
out <- paste("Git",commit2char(committed))
library(adapr)
remove.project("Hello1")
init.project("Hello1")
remove.project("Hello1")
library(adapr)
init.project("Hello1")
remove.project("Hello1")
library(adapr)
init.project("Hello1")
commit.project()
commit.project
source('~/Documents/Projects/adapr/R/intialize.dependency.info.R')
library(adapr)
remove.project("Hello1")
init.project("Hello1")
library(adapr)
devtools::load_all()
library(adapr)
init.project("Hello2")
init.project("Morilak_343")
set.project("Morilak_343")
show.project()
library(adapr)
ls()
rm(list=ls())
library(adapr)
library(adapr)
library(adapr)
sync.project()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library("acepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:acepack", unload=TRUE)
library(adapr)
library(adapr)
ls()
rm(list=ls())
library(adapr)
run.program
?report.project()
report.project
project_report_markdown
report.project
pull_source_info("adaprHome")
library(adapr)
commit.project
git.add
library(adapr)
library(adapr)
library(adapr)
library(adapr)
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
runApp('inst/adapr21')
runApp('inst/adapr21')
library(adapr)
library(adapr)
? document
ls()
rm(list=ls())
load_all()
devtools::load_all()
devtools::load_all()
library(adapr)
library(devtools)
load_all()
source('~/Documents/Projects/adapr/R/create_markdown.R')
load_all()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(devtools)
load_all()
ls()
library(adapr)
library(adapr)
set.project("Weiner_SNP")
set.project("Weiner_SNP",1)
set.project("Weiner_SsfdNP",1)
set.project("Weiner_SNP",1)
make.program(r="test2.R")
show.project()
source('~/Documents/Projects/Weiner_SNP/Programs/test2.R')
source('~/Documents/Projects/Weiner_SNP/Programs/test2.R')
source('~/Documents/Projects/Weiner_SNP/Programs/test2.R')
rm(list=ls())
.Library
.Library
?.Library
.libPaths()
library(adapr)
devtools::load_all()
library(adapr)
load_all()
library(adapr)
library(adapr)
(diag(2)-diag(rho,2,2))+matrix(rho,2,2)
rho <- 2
(diag(2)-diag(rho,2,2))+matrix(rho,2,2)
rho <- .2
(diag(2)-diag(rho,2,2))+matrix(rho,2,2)
sessionInfo()
library(adapr)
packageVersion("digest")
packageDescription("adapr")
library(adapr)
init.project("test3")
library(adapr)
load_all()
library(devtools)
load_all()
init.project("Test4",first.program = "happy.R")
show.project()
show.project()
library(adapr)
remove.project("Test4")
init.project("Test4",first.program = "happy.R")
library(adapr)
remove.project("Test4")
init.project("Test4",first.program = "happy.R")
run.program()
run.program("Happy.R")
list.programs()
list.datafiles()
list.branches()
make.program("test.R")
library(adapr)
run.proj
make.program("test.R")
remove.program(source.file = "test.R")
library(adapr)
make.program("test.R")
remove.program("Test4",source.file="test.R")
project.directory.tree
library(adapr)
make.program("test.R")
remove.program("Test4",source.file="test.R")
make.program("test.R")
remove.program("Test4",source.file="test.R")
make.program("test.R")
remove.program("Test4",source.file="test.R")
devtools::session_info()$packages
id_new_libs
source('~/Documents/Projects/adapr/R/id_new_libs.R')
library(adapr)
source('~/Documents/Projects/Test4/Programs/happy.R')
read_library()
source('~/Documents/Projects/Test4/Programs/happy.R')
read_library()
? Matrix
git.configure.test()
temp <- git.configure.test()
temp
git.configure
ls()
? git.lookup
library(git2r)
? git.lookup
? git2r::lookup
lookup
? config
config()
config()@global
temp <- config()
temp
names(temp)
temp[["global"]]
temp[["global"]]$user.email
git2r::config()[["global"]]$user.email
git2r::config()[["global"]]$user.email
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(foreign)
library(ReporteRs)
library(knitr)
source.file <-"read_data.R"
project.id <- "MSCI_regression"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
fghm <- Read("framingham person-time.dta","from cornell",read.fcn=read.dta)
Write(fghm,"fghm_heart_study_mortality.csv","export to csv")
Graph("sbp_vs_age.pdf","hexbin",height=8,width=12)
print(ggplot(fghm,aes(x=age,y=sbp))+geom_hex()+geom_point(color="red")+geom_smooth(color="orange"))
dev.off()
lmfit <- lm(sbp~age,data=fghm)
send.pubresults()
fghm
head(fghm)
lmfit <- lm(sbp~age+sbp,data=fghm)
lmfit <- lm(sbp~age+bmi+gender,data=fghm)
lmfit <- lm(sbp~age+bmi+gender,data=fghm)
summary(lmfit)
lmfit <- lm(sbp~age+bmi+gender,data=fghm)
lmfit <- lm(sbp~age+bmi+Gender,data=fghm)
lmfit <- lm(sbp~age+bmi+sex,data=fghm)
summary(lmfit)
lmfit <- lm(sbp~age+bmi+sex,data=fghm)
summary(fghm$sex)
summary(lmfit)
lmfit <- lm(sbp~age+bmi*sex,data=fghm)
summary(lmfit)
lmfit <- lm(sbp~age*sex+bmi,data=fghm)
summary(lmfit)
with(fghm,cor(age,sbp))
coragesbp <- with(fghm,cor(age,sbp))
print(coragesbp^2)
print(lmfit$coefficients)[2]
lmfit <- lm(sbp~age,data=fghm)
print(lmfit$coefficients)[2]
print(summary(lmfit))
hist(lmfit$residuals)
qqnorm(lmfit$residuals)
plot(lmfit$fitted.values, lmfit$residuals)
plot(lmfit$fitted.values,rstudent(lmfit))
plot(lmfit$fitted.values,lmfit$model$age)
plot(lmfit$fitted.values,lmfit$model$age,type="l")
lines(lmfit$model$age,predict(lmfit,interval = "conf"))
predict(lmfit,interval = "conf")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2])
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
plot(lmfit$model$age,lmfit$fitted.values)
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
plot(lmfit$model$age,lmfit$fitted.values)
points(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
? lines
fghm <- dplyr::arrange(fghm,desc(age))
lmfit <- lm(sbp~age,data=fghm)
plot(lmfit$fitted.values, lmfit$residuals)
plot(lmfit$fitted.values,rstudent(lmfit))
plot(lmfit$fitted.values,lmfit$model$age)
plot(lmfit$model$age,lmfit$fitted.values)
points(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
plot(lmfit$model$age,lmfit$fitted.values,type="l")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,3],col="red")
plot(lmfit$model$age,lmfit$fitted.values,type="l")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,3],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,3],col="red")
plot(lmfit$model$age,lmfit$model$sbp)
lines(lmfit$model$age,lmfit$fitted.values)
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,3],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,3],col="red")
shapiro.test(lmfit$residuals)
lmfit2 <-  lm(sbp~age+bmi+sex,data=fghm)
lmfit2 <-  lm(sbp~age+bmi+sex,data=fghm)
summary(lmfit)
summary(lmfit2)
lmfit2 <-  lm(sbp~age*sex+bmi,data=fghm)
summary(lm(sbp~age+bmi,data=subset(fghm,sex=="Male")))
summary(lm(sbp~age+bmi,data=subset(fghm,sex!="Male"))
summary(lm(sbp~age+bmi,data=subset(fghm,sex!="Male")))
summary(lm(sbp~age+bmi,data=subset(fghm,sex!="Male")))
lmfit2 <-  lm(sbp~age*sex+bmi,data=fghm)
summary(lmfit3)
lmfit3 <-  lm(sbp~age*sex+bmi,data=fghm)
summary(lmfit3)
library(adapr)
rep("time",1)
library(adapr)
files <- "hi"
files[1]
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(parellel)
library(parallel)
parallel::makeCluster(:)
? parallel::makeCluster
source('~/Documents/Projects/adapr/R/parallelsync_project.R')
? stopCluster
source('~/Documents/Projects/adapr/R/parallelsync_project.R')
library(adapr)
set.project("Weiner_SNP",1)
sync.project()
parallelSync.project()
library(doParallel)
library(adapr)
library(adapr)
library(adapr)
set.project("Weiner_SNP",1)
parallelSync.project()
parallelSync.project
source('~/Documents/Projects/adapr/R/parallelsync_project.R')
parallelSync.project()
parallelSync.project()
library(adapr)
library(adapr)
library(adapr)
install.packages("adapr")
q()
ls()
load_all()
library(devtools)
library(adapr)
load_all()
session_info()
session_info()
temp <- session_info()
names(temp)
temp$packages
class(temp$packages)
devtools::loaded_packages()
init.project("adaprTest")
show.project()
sync.project
? commit.project
Sys.time()
get_adapr_options()
finalize_dependency
create_markdown
default.adapr.setup
git2r::config()[["global"]]$user
git2r::config()[["global"]]
git2r::config()[["global"]]$name
git2r::config()[["global"]]$user.name
git2r::config()[["global"]]$user.email
library(tableone)
library(coefplot)
coefplot.lm(modelfit.Rdata[["mpg"]])
"adaprTest" %in% get_orchard()$project.id
get_adapr_options()$project.path
library(adapr)
remove.project("adaprTest")
loadAdaprTest()
remove.project("adaprTest")
loadAdaprTest <- function(){
# Loads an example project
if("adaprTest" %in% get_orchard()$project.id){
print("adaprTest already loaded try remove.project(\"adaprTest\")")
return(1)
}else{
projectLocation <- system.file("adaprTest.zip",package="adapr")
file.copy(projectLocation,get_adapr_options()$project.path)
newLocation <- file.path(get_adapr_options()$project.path,"adaprTest.zip")
untils <- unzip(newLocation)
file.remove(newLocation)
relocate.project("adaprTest")
}
return(0)
}# END: loadAdaprTest
loadAdaprTest()
set.project("adaprTest")
graph.project()
get.project.path("adaprTest")
remove.project("adaprTest")
loadAdaprTest()
get_orchard("ad")
set.project("adaprTest")
set.project("adaprTest",1)
graph.project()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
remove.project("adaprTest")
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
? unzipe
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
?basename()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
set.project("adaprTest")
graph.project()
sync.project()
graph.project()
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
show.project()
parallelSync.project()
parallelSync.project(n.cores = 3)
loadAdaprTest()
graph.project()
parallelSync.project()
parallelSync.project(n.cores = 3)
loadAdaprTest()
parallelSync.project(n.cores = 3)
graph.project()
