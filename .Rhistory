? zip
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest",flags="x")
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest",flags="x")
zip("/Users/Gelfond/Documents/Projects/adaprTest.zip",files="/Users/Gelfond/Documents/Projects/adaprTest",flags="x")
setwd("/Users/Gelfond/Documents/Projects")
zip("adaprTest.zip",files="adaprTest")
loadAdaprTest()
library(adapr)
loadAdaprTest()
getwd()
list.files("adaprTest",full.names = TRUE)
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE)
lister
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE)
? list.files
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE,all.files = TRUE)
lister
(grep("\\.git",lister,v=1))
file.remove(grep("\\.git",lister,v=1))
lister <- list.files("adaprTest",full.names = TRUE,recursive = TRUE,all.files = TRUE)
lister
zip("adaprTest.zip",files="adaprTest")
library(adapr)
loadAdaprTest()
getProject()
graphProject()
syncProject()
graphProject()
getProjectLibrary()
setProject
library(adapr)
load_all()
devtools::load_all()
q()
library(devtools)
load_all()
library(adapr)
library(adapr)
library(adapr)
Write
guessWriteFcn()
guessWriteFcn
setwd(getAdaprOptions()$project.path)
zip("adaprTest.zip",files="adaprTest")
?zip
?list.files
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest",recursive=TRUE,all.files=FALSE))
setwd(getAdaprOptions()$project.path)
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest",recursive=TRUE,all.files=FALSE))
testFiles
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest"),recursive=TRUE,all.files=FALSE))
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest"),recursive=TRUE,all.files=FALSE)
testFiles
? zip
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest"),recursive=TRUE,all.files=FALSE)
setwd(getAdaprOptions()$project.path)
zip("adaprTest.zip",files=testFiles)
testFiles
setwd(file.path(getAdaprOptions()$project.path,"adaprTest"))
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest"),recursive=TRUE,all.files=FALSE)
zip("adaprTest.zip",files=testFiles)
setwd(file.path(getAdaprOptions()$project.path,"adaprTest"))
library(adapr)
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest"),recursive=TRUE,all.files=FALSE)
zip("adaprTest.zip",files=testFiles)
setwd(file.path(getAdaprOptions()$project.path,"adaprTest"))
testFiles
zip("adaprTest.zip",files=testFiles)
browseURL(file.path(getAdaprOptions()$project.path,"adaprTest"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
graphProject
source('~/Documents/Projects/adapr/R/rapidPlot.R')
graphData <- graphProject("adaprHome")
rapidPlot(graphData)
source('~/Documents/Projects/adapr/R/sync_test_si.R')
source('~/Documents/Projects/adapr/R/rapidPlot.R')
setProject("Weiner_SNP")
syncProject()
syncProject2()
openScript <- function(rscript="",project.id = getProject()){
markdownTF <- ifelse(length(grep("\\.Rmd$",""))==0,"","Markdown")
if(rscript==""){
files <- list.files(file.path(getProjectPath(getProject()),"Programs"))
files <- grep("\\.R",files,value=TRUE)
df <- listScripts()
df <- df[order(df$source.file),]
print(df)
n <- as.integer(readline("Which script?"))
if(!(n %in% 1:length(files))){n <- 1}
rscript <- df$source.file[n]
}
programDir <- "Programs"
if(markdownTF){ programDir <- file.path("Programs","Markdown")}
return(utils::browseURL(file.path(getProjectPath(project.id ),programDir,rscript)))
}
openScript("read_data.R")
openScript <- function(rscript="",project.id = getProject()){
markdownTF <- length(grep("\\.Rmd$","",rscript))>0
if(rscript==""){
files <- list.files(file.path(getProjectPath(getProject()),"Programs"))
files <- grep("\\.R",files,value=TRUE)
df <- listScripts()
df <- df[order(df$source.file),]
print(df)
n <- as.integer(readline("Which script?"))
if(!(n %in% 1:length(files))){n <- 1}
rscript <- df$source.file[n]
}
programDir <- "Programs"
if(markdownTF){ programDir <- file.path("Programs","Markdown")}
return(utils::browseURL(file.path(getProjectPath(project.id ),programDir,rscript)))
}
openScript("read_data.R")
openScript("read_data.Rmd")
rscript <- "read_data.Rmd"
markdownTF <- length(grep("\\.Rmd$","",rscript))>0
markdownTF
openScript <- function(rscript="",project.id = getProject()){
markdownTF <- length(grep("\\.Rmd$",rscript))>0
if(rscript==""){
files <- list.files(file.path(getProjectPath(getProject()),"Programs"))
files <- grep("\\.R",files,value=TRUE)
df <- listScripts()
df <- df[order(df$source.file),]
print(df)
n <- as.integer(readline("Which script?"))
if(!(n %in% 1:length(files))){n <- 1}
rscript <- df$source.file[n]
}
programDir <- "Programs"
if(markdownTF){ programDir <- file.path("Programs","Markdown")}
return(utils::browseURL(file.path(getProjectPath(project.id ),programDir,rscript)))
}
openScript("read_data.Rmd")
setProject("Weiner_SNP")
openScript()
graphProject()
syncProject2()
source('~/Documents/Projects/adapr/R/sync_test_si.R')
syncProject2()
openScript()
syncProject2()
listScripts()
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read")
library(stringr)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("read","Weiner_SNP")
searchScripts("snp","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
project.id = getProject()
matcher <- "snp"
path <- getProjectPath(project.id)
files <- list.files(file.path(path,'Programs'),recursive = TRUE)
filesr <- grep('(R$)|(\\.Rmd$)',files, value=TRUE)
scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,scan,what=character(),sep="\n")
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),dir=dirnamer)
count.all <- function(x,matcher){
count <- lapply(x,function(y){ifelse(is.na(stringr::str_match(y,matcher)),0,1)})
return(dplyr::arrange(plyr::ldply(count,function(y) sum(y)),desc(V1)))
}
names(count.all) <- c("file","count")
count.dat <- subset(count.all(top,matcher),V1>0)
count.dat <- merge(dirs,count.dat)
names(count.all)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
library(adapr)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
searchScripts("sn239yskp","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("sn239yskp","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("sn239yskp","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("sn239yskp","Weiner_SNP")
searchScripts("snp","Weiner_SNP")
library(adapr)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
searchScripts("ssafsad","Weiner_SNP")
? grep
source('~/Documents/Projects/adapr/R/searchScripts.R')
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
path <- getProjectPath(project.id)
files <- list.files(file.path(path,'Programs'),recursive = TRUE)
filesr <- grep('(R$)|(\\.Rmd$)',files, value=TRUE)
scripts <- file.path(path,'Programs',filesr)
top <- lapply(scripts,scan,what=character(),sep="\n")
names(top) <- basename(scripts)
dirnamer <- basename(dirname(scripts))
dirs <- data.frame(file=basename(scripts),directory=dirnamer)
count.all <- function(x,matcher){
count <- lapply(x,function(y){ifelse(sum(grepl(matcher,y,...))>0,0,1)})
return(plyr::ldply(count,function(y) sum(y)))
}
top
top[[1]]
lapply(top,function(y){return(sum(grepl(matcher,y)))})
matcher
count <- plyr::ldply(lapply(top,function(y){return(sum(grepl(matcher,y)))}))
count
library(adapr)
source('~/Documents/Projects/adapr/R/searchScripts.R')
searchScripts("snp","Weiner_SNP")
library(adapr)
project.id = getProject()
project.id
source_info <- pullSourceInfo(project.id)
test.sync0 <- syncTestSI(source_info)
text <- paste(project.id, "Already synchonized")
last.prog <- " "
syncer <- sourceSyncSILoad(source_info)
run.times <- syncer$run.times
idSync.out <- syncer$idSync.out
sync.out <- syncer$sync.out
wait0 <- ceiling(as.numeric(sum(run.times$last.run.time.sec)) *
1.5)
ggproject <- createProgramGraph(getProject(),testSync=FALSE)
ggproject$vertex$synccolor <- factor(ggproject$vertex$synccolor,levels=c("Synchronized","Not Synchronized","Running"))
ggproject$vertex$synccolor[basename(ggproject$vertex$fullname) %in% idSync.out$file] <- "Not Synchronized"
n.scripts.to.sync <- nrow(idSync.out)
startmessage <- paste("Start sync approximate Time:",
wait0, "seconds", n.scripts.to.sync, "scripts")
full.time <- wait0
last.prog <- "Go"
source.iter <- 0
print(rapidPlot(ggproject,startmessage))
syncer
test.sync0 <- syncTestSI(source_info)
test.sync0
plot(test.sync0$updated.graph)
scriptSubgraph(plotTF=1)
scriptSubgraph
listProjects()
setProject("test123")
graphProject()
scriptSubgraph()
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
scriptSubgraph()
getDepSubgraph("read_data.R")
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
subGraph$subgraph
rscript
rscript <- read_data.R
rscript <- "read_data.R"
project.id=getProject()
si <- pullSourceInfo(project.id)
projinfo <- getProjectInfoSI(si)
projgraph <- projinfo$graph
sources <- unique(projinfo$tree$source.file)
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
# if(length(vertexnames)==1){stop("scriptSubgraph: Only 1 R script")}
# Get all script output files
inedges <- igraph::adjacent_vertices(projgraph, vertexnames,"out")
inedges <- lapply(inedges,function(x){return(attr(x,"name"))})
inedges <- plyr::ldply(inedges,as.data.frame)
names(inedges) <- c("to","from")
dfgraph <- igraph::as_data_frame(projgraph,what="edges")
dfgraph$to <- plyr::mapvalues(dfgraph$to,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfgraph$from <- plyr::mapvalues(dfgraph$from,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfoo <- igraph::graph_from_data_frame(dfgraph)
# Remove output files from graph
graph2 <- igraph::simplify(igraph::delete_vertices(dfoo,setdiff(igraph::V(dfoo)$name,vertexnames)))
lo <- igraph::layout.sugiyama(projgraph)
tp <- function(x){
x <- x[,2:1]
x[,1] <- max(x[,1])- x[,1]
return(x)
}
longgraph <- NULL
isg <- graph2
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
# Sometimes No Edges can mess up graph layouts
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(igraph::graph.data.frame(data.frame(from=vertexnames[1],to=vertexnames[1])))
}
# Sometimes 1 Vertex can mess up graph layouts
if(length(vertexnames)==1){
dfo <- data.frame(v=vertexnames[1],x=0,y=0)
dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
}else{
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}
if(plotTF){graphics::plot(isg,vertex.label=basename(igraph::V(isg)$name),layout=dfo)}
return(list(subgraph=isg,layout=dfo))
}   # End subgraph
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
scriptSubgraph <- function(project.id=getProject(),plotTF=FALSE){
si <- pullSourceInfo(project.id)
projinfo <- getProjectInfoSI(si)
projgraph <- projinfo$graph
sources <- unique(projinfo$tree$source.file)
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
# if(length(vertexnames)==1){stop("scriptSubgraph: Only 1 R script")}
# Get all script output files
inedges <- igraph::adjacent_vertices(projgraph, vertexnames,"out")
inedges <- lapply(inedges,function(x){return(attr(x,"name"))})
inedges <- plyr::ldply(inedges,as.data.frame)
names(inedges) <- c("to","from")
dfgraph <- igraph::as_data_frame(projgraph,what="edges")
dfgraph$to <- plyr::mapvalues(dfgraph$to,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfgraph$from <- plyr::mapvalues(dfgraph$from,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfoo <- igraph::graph_from_data_frame(dfgraph)
# Remove output files from graph
graph2 <- igraph::simplify(igraph::delete_vertices(dfoo,setdiff(igraph::V(dfoo)$name,vertexnames)))
lo <- igraph::layout.sugiyama(projgraph)
tp <- function(x){
x <- x[,2:1]
x[,1] <- max(x[,1])- x[,1]
return(x)
}
longgraph <- NULL
isg <- graph2
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
# Sometimes No Edges can mess up graph layouts
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(igraph::graph.data.frame(data.frame(from=vertexnames[1],to=vertexnames[1])))
}
# Sometimes 1 Vertex can mess up graph layouts
if(length(vertexnames)==1){
dfo <- data.frame(v=vertexnames[1],x=0,y=0)
dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
}else{
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}
if(plotTF){graphics::plot(isg,vertex.label=basename(igraph::V(isg)$name),layout=dfo)}
return(list(subgraph=isg,layout=dfo))
}   # End subgraph
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
subGraph
igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
getDepSubgraph <- function(rscript,project.id=getProject(),plotTF=FALSE){
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
try({
fromTo <- igraph::ends(subGraph$subgraph,1:length(igraph::E(subGraph$subgraph)))
hotEdges <- which((fromTo[,1] %in% upStream)&(fromTo[,2] %in% upStream))
igraph::E(subGraph$subgraph)$color[hotEdges] <- "red"
})
if(plotTF){
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
}
return(upStream)
}
getDepSubgraph("read_data.R")
temp <- getDepSubgraph("read_data.R")
temp
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
fromTo <- igraph::ends(subGraph$subgraph,1:length(igraph::E(subGraph$subgraph)))
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
subGraph
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
subGraph$layout
#' Produces script only subgraph
#' @param project.id Project id
#' @param plotTF logical to plot subgraph
#' @details For use with getDepSubgraph
#' @return list with subgraph in igraph format, layout for plottingss
#' @export
#' @examples
#'\dontrun{
#'  subGraph <- scriptSubgraph(project.id=getProject())
#'  plot(subGraph[[1]],vertex.label=basename(V(subGraph[[1]])$name),layout=subGraph[[2]])
#'}
#'
scriptSubgraph <- function(project.id=getProject(),plotTF=FALSE){
si <- pullSourceInfo(project.id)
projinfo <- getProjectInfoSI(si)
projgraph <- projinfo$graph
sources <- unique(projinfo$tree$source.file)
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
# if(length(vertexnames)==1){stop("scriptSubgraph: Only 1 R script")}
# Get all script output files
inedges <- igraph::adjacent_vertices(projgraph, vertexnames,"out")
inedges <- lapply(inedges,function(x){return(attr(x,"name"))})
inedges <- plyr::ldply(inedges,as.data.frame)
names(inedges) <- c("to","from")
dfgraph <- igraph::as_data_frame(projgraph,what="edges")
dfgraph$to <- plyr::mapvalues(dfgraph$to,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfgraph$from <- plyr::mapvalues(dfgraph$from,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfoo <- igraph::graph_from_data_frame(dfgraph)
# Remove output files from graph
graph2 <- igraph::simplify(igraph::delete_vertices(dfoo,setdiff(igraph::V(dfoo)$name,vertexnames)))
lo <- igraph::layout.sugiyama(projgraph)
tp <- function(x){
x <- x[,2:1]
x[,1] <- max(x[,1])- x[,1]
return(x)
}
longgraph <- NULL
isg <- graph2
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
# Sometimes No Edges can mess up graph layouts
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(igraph::graph.data.frame(data.frame(from=vertexnames[1],to=vertexnames[1])))
}
# Sometimes 1 Vertex can mess up graph layouts
if(length(vertexnames)==1){
dfo <- data.frame(v=vertexnames[1],x=0,y=0)
dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}else{
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}
if(plotTF){graphics::plot(isg,vertex.label=basename(igraph::V(isg)$name),layout=dfo)}
return(list(subgraph=isg,layout=dfo))
}   # End subgraph
scriptSubgraph(project.id,plotTF=FALSE)
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
makeScript("test.R")
graphProject()
scriptSubgraph(plotTF = 1)
getDepSubgraph("test.R")
getDepSubgraph("test.R",1)
getDepSubgraph("test.R",plotTF = 1)
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
igraph::E(subGraph$subgraph)
length(igraph::E(subGraph$subgraph)$arrow.size)
getDepSubgraph("read_data.R")
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
getDepSubgraph("read_data.R")
getDepSubgraph("read_data.R",plotTF = 1)
require("knitr")
