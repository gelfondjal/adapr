packageVersion("digest")
packageDescription("adapr")
library(adapr)
init.project("test3")
library(adapr)
load_all()
library(devtools)
load_all()
init.project("Test4",first.program = "happy.R")
show.project()
show.project()
library(adapr)
remove.project("Test4")
init.project("Test4",first.program = "happy.R")
library(adapr)
remove.project("Test4")
init.project("Test4",first.program = "happy.R")
run.program()
run.program("Happy.R")
list.programs()
list.datafiles()
list.branches()
make.program("test.R")
library(adapr)
run.proj
make.program("test.R")
remove.program(source.file = "test.R")
library(adapr)
make.program("test.R")
remove.program("Test4",source.file="test.R")
project.directory.tree
library(adapr)
make.program("test.R")
remove.program("Test4",source.file="test.R")
make.program("test.R")
remove.program("Test4",source.file="test.R")
make.program("test.R")
remove.program("Test4",source.file="test.R")
devtools::session_info()$packages
id_new_libs
source('~/Documents/Projects/adapr/R/id_new_libs.R')
library(adapr)
source('~/Documents/Projects/Test4/Programs/happy.R')
read_library()
source('~/Documents/Projects/Test4/Programs/happy.R')
read_library()
? Matrix
git.configure.test()
temp <- git.configure.test()
temp
git.configure
ls()
? git.lookup
library(git2r)
? git.lookup
? git2r::lookup
lookup
? config
config()
config()@global
temp <- config()
temp
names(temp)
temp[["global"]]
temp[["global"]]$user.email
git2r::config()[["global"]]$user.email
git2r::config()[["global"]]$user.email
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(foreign)
library(ReporteRs)
library(knitr)
source.file <-"read_data.R"
project.id <- "MSCI_regression"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
fghm <- Read("framingham person-time.dta","from cornell",read.fcn=read.dta)
Write(fghm,"fghm_heart_study_mortality.csv","export to csv")
Graph("sbp_vs_age.pdf","hexbin",height=8,width=12)
print(ggplot(fghm,aes(x=age,y=sbp))+geom_hex()+geom_point(color="red")+geom_smooth(color="orange"))
dev.off()
lmfit <- lm(sbp~age,data=fghm)
send.pubresults()
fghm
head(fghm)
lmfit <- lm(sbp~age+sbp,data=fghm)
lmfit <- lm(sbp~age+bmi+gender,data=fghm)
lmfit <- lm(sbp~age+bmi+gender,data=fghm)
summary(lmfit)
lmfit <- lm(sbp~age+bmi+gender,data=fghm)
lmfit <- lm(sbp~age+bmi+Gender,data=fghm)
lmfit <- lm(sbp~age+bmi+sex,data=fghm)
summary(lmfit)
lmfit <- lm(sbp~age+bmi+sex,data=fghm)
summary(fghm$sex)
summary(lmfit)
lmfit <- lm(sbp~age+bmi*sex,data=fghm)
summary(lmfit)
lmfit <- lm(sbp~age*sex+bmi,data=fghm)
summary(lmfit)
with(fghm,cor(age,sbp))
coragesbp <- with(fghm,cor(age,sbp))
print(coragesbp^2)
print(lmfit$coefficients)[2]
lmfit <- lm(sbp~age,data=fghm)
print(lmfit$coefficients)[2]
print(summary(lmfit))
hist(lmfit$residuals)
qqnorm(lmfit$residuals)
plot(lmfit$fitted.values, lmfit$residuals)
plot(lmfit$fitted.values,rstudent(lmfit))
plot(lmfit$fitted.values,lmfit$model$age)
plot(lmfit$fitted.values,lmfit$model$age,type="l")
lines(lmfit$model$age,predict(lmfit,interval = "conf"))
predict(lmfit,interval = "conf")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2])
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
plot(lmfit$model$age,lmfit$fitted.values)
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
plot(lmfit$model$age,lmfit$fitted.values)
points(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
? lines
fghm <- dplyr::arrange(fghm,desc(age))
lmfit <- lm(sbp~age,data=fghm)
plot(lmfit$fitted.values, lmfit$residuals)
plot(lmfit$fitted.values,rstudent(lmfit))
plot(lmfit$fitted.values,lmfit$model$age)
plot(lmfit$model$age,lmfit$fitted.values)
points(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
plot(lmfit$model$age,lmfit$fitted.values,type="l")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,3],col="red")
plot(lmfit$model$age,lmfit$fitted.values,type="l")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,3],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,3],col="red")
plot(lmfit$model$age,lmfit$model$sbp)
lines(lmfit$model$age,lmfit$fitted.values)
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "conf")[,3],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,2],col="red")
lines(lmfit$model$age,predict(lmfit,interval = "pred")[,3],col="red")
shapiro.test(lmfit$residuals)
lmfit2 <-  lm(sbp~age+bmi+sex,data=fghm)
lmfit2 <-  lm(sbp~age+bmi+sex,data=fghm)
summary(lmfit)
summary(lmfit2)
lmfit2 <-  lm(sbp~age*sex+bmi,data=fghm)
summary(lm(sbp~age+bmi,data=subset(fghm,sex=="Male")))
summary(lm(sbp~age+bmi,data=subset(fghm,sex!="Male"))
summary(lm(sbp~age+bmi,data=subset(fghm,sex!="Male")))
summary(lm(sbp~age+bmi,data=subset(fghm,sex!="Male")))
lmfit2 <-  lm(sbp~age*sex+bmi,data=fghm)
summary(lmfit3)
lmfit3 <-  lm(sbp~age*sex+bmi,data=fghm)
summary(lmfit3)
library(adapr)
rep("time",1)
library(adapr)
files <- "hi"
files[1]
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(parellel)
library(parallel)
parallel::makeCluster(:)
? parallel::makeCluster
source('~/Documents/Projects/adapr/R/parallelsync_project.R')
? stopCluster
source('~/Documents/Projects/adapr/R/parallelsync_project.R')
library(adapr)
set.project("Weiner_SNP",1)
sync.project()
parallelSync.project()
library(doParallel)
library(adapr)
library(adapr)
library(adapr)
set.project("Weiner_SNP",1)
parallelSync.project()
parallelSync.project
source('~/Documents/Projects/adapr/R/parallelsync_project.R')
parallelSync.project()
parallelSync.project()
library(adapr)
library(adapr)
library(adapr)
install.packages("adapr")
q()
ls()
load_all()
library(devtools)
library(adapr)
load_all()
session_info()
session_info()
temp <- session_info()
names(temp)
temp$packages
class(temp$packages)
devtools::loaded_packages()
init.project("adaprTest")
show.project()
sync.project
? commit.project
Sys.time()
get_adapr_options()
finalize_dependency
create_markdown
default.adapr.setup
git2r::config()[["global"]]$user
git2r::config()[["global"]]
git2r::config()[["global"]]$name
git2r::config()[["global"]]$user.name
git2r::config()[["global"]]$user.email
library(tableone)
library(coefplot)
coefplot.lm(modelfit.Rdata[["mpg"]])
"adaprTest" %in% get_orchard()$project.id
get_adapr_options()$project.path
library(adapr)
remove.project("adaprTest")
loadAdaprTest()
remove.project("adaprTest")
loadAdaprTest <- function(){
# Loads an example project
if("adaprTest" %in% get_orchard()$project.id){
print("adaprTest already loaded try remove.project(\"adaprTest\")")
return(1)
}else{
projectLocation <- system.file("adaprTest.zip",package="adapr")
file.copy(projectLocation,get_adapr_options()$project.path)
newLocation <- file.path(get_adapr_options()$project.path,"adaprTest.zip")
untils <- unzip(newLocation)
file.remove(newLocation)
relocate.project("adaprTest")
}
return(0)
}# END: loadAdaprTest
loadAdaprTest()
set.project("adaprTest")
graph.project()
get.project.path("adaprTest")
remove.project("adaprTest")
loadAdaprTest()
get_orchard("ad")
set.project("adaprTest")
set.project("adaprTest",1)
graph.project()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
remove.project("adaprTest")
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
? unzipe
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
?basename()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
set.project("adaprTest")
graph.project()
sync.project()
graph.project()
? unzip
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
source('~/Documents/Projects/adapr/R/default_setup.R')
loadAdaprTest()
show.project()
parallelSync.project()
parallelSync.project(n.cores = 3)
loadAdaprTest()
graph.project()
parallelSync.project()
parallelSync.project(n.cores = 3)
loadAdaprTest()
parallelSync.project(n.cores = 3)
graph.project()
library(adapr)
set.project("adaprTest")
set.project("adaprTest",1)
graph.project()
graph.project()
sync.project()
graph.project()
Load.branch
sync.project()
sync.project
source_sync_si_load
Harvest.trees
get.library <- function(project.id = get.project()){
programs <- list.programs(project.id)
path <- get.project.path(project.id)
packageInfo <- plyr::ddply(programs,"source.file",function(program){
packages <- file.path(path,project.directory.tree$support,gsub("\\.","_",program$source.file[1]),"package_info.csv")
out <- utils::read.csv(packages)
return(out)
})
return(packageInfo)
}
get.library()
library(adapr)
get.library()
get.project)()
get.project()
View(list.projects())
get.sourceInfo <- function(){
return(options()$adaprScriptInfo)
}
get.sourceInfo()
library(adapr)
get.scriptInfo()
get.sourceInfo()
libraryList <- get.library()
libraryList
get.project()
? withr
? XML
librarydf <- get.library()
librarydf
set.project(Escaname
_402)
set.project("Escaname_402")
get.library()
librarydf <- get.library()
librarydf <- librarydf[order(-librarydf$version),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
order(-as.numeric(as.character(librarydf$version)))
librarydf <- get.library()
librarydf$version
librarydf <- get.library()
librarydf <- librarydf[order(as.character(librarydf$version)),]
librarydf
?order
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=FALSE),]
librarydf
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf
dim(librarydf)
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
dim(librarydf)
librarydf <- subset(librarydf,!duplicated(librarydf$package))
? install.packages
View(librarydf)
get.project()
show.project()
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf
install.packages()
installed.packages()
installed <- install.packages()
installed <- utils::installed.packages()
head(installed)
class(installed)
installed <- data.frame(utils::installed.packages())
head(installed)
names(installed)
x <- librarydf[12,]
x
installcheck <- subset(installed,Package==x$package)
librarydf$Package <- as.character(librarydf$package)
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed
installcheck <- subset(installed,as.character(Package==x$package))
installcheck <- subset(installed,Package==x$Package[1])
installcheck
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installcheck <- subset(installed,Package==x$Package[1])
installcheck
x <- librarydf[12,]
x$Package[1]
installed$Package
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
x$Package[1]
installcheck <- subset(installed,Package==x$Package[1])
subset(installed,Package==x$Package[1])
x$version[1]
installcheck$Version[1]
installcheck$Version[1] == x$version[1]
librarydf$Version <- as.character(librarydf$version)
x <- librarydf[12,]
versionMatch <- installcheck$Version[1] == x$version[1]
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed$Version <- as.character(installed$Version)
librarydf$Version <- as.character(librarydf$version)
installcheck$Version[1] == x$Version[1]
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installed <- nrow(installcheck)!=0
installcheck <- subset(installed,Package==x$Package[1])
installed <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
data.frame(installed=installedTF,versionMatch)
})
librarydf <- get.library()
librarydf <- librarydf[order(as.Date(librarydf$date),decreasing=TRUE),]
librarydf <- subset(librarydf,!duplicated(librarydf$package))
librarydf$Package <- as.character(librarydf$package)
installed <- data.frame(utils::installed.packages())
installed$Package <- as.character(installed$Package)
installed$Version <- as.character(installed$Version)
librarydf$Version <- as.character(librarydf$version)
x <- librarydf[12,]
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,installed$Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
data.frame(installed=installedTF,versionMatch)
})
installout
installout <- plyr::ddply(librarydf,"package",function(x){
installcheck <- subset(installed,installed$Package==x$Package[1])
installedTF <- nrow(installcheck)!=0
if(nrow(installcheck)==0){
versionMatch <- FALSE
}else{
versionMatch <- installcheck$Version[1] == x$Version[1]
}
return(data.frame(installed=installedTF,version=x$Version[1],versionMatch,repos=x$source))
})
installout
table(installout$repos)
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType <- ifelse(grepl("^cran",tolower(installout$repos)),"cran",installout$repoType)
installout$repoType
subset(installout,is.na(repoType))
installout$repoType <- ifelse(grepl("^bioc",tolower(installout$repos)),"bioc",NA)
installout$repoType <- ifelse(grepl("^cran",tolower(installout$repos)),"cran",installout$repoType)
installout$repoType <- ifelse(grepl("^local",tolower(installout$repos)),"local",installout$repoType)
installout$repoType
?devtools::install_cran()
?install_cran()
install_version("survival")
library(devtools)
install_version("survival")
source("http://bioconductor.org/biocLite.R")
tempfcn <- get("biocLite")
? biocLite
load.install.library.file
get.library
temp <- get.library()
head(temp)
source('~/.active-rstudio-document')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
source('~/Documents/Projects/Weiner_SNP/Programs/support_functions/impute_fit.R')
