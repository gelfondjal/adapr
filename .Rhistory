dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
}else{
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}
if(plotTF){graphics::plot(isg,vertex.label=basename(igraph::V(isg)$name),layout=dfo)}
return(list(subgraph=isg,layout=dfo))
}   # End subgraph
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
scriptSubgraph <- function(project.id=getProject(),plotTF=FALSE){
si <- pullSourceInfo(project.id)
projinfo <- getProjectInfoSI(si)
projgraph <- projinfo$graph
sources <- unique(projinfo$tree$source.file)
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
# if(length(vertexnames)==1){stop("scriptSubgraph: Only 1 R script")}
# Get all script output files
inedges <- igraph::adjacent_vertices(projgraph, vertexnames,"out")
inedges <- lapply(inedges,function(x){return(attr(x,"name"))})
inedges <- plyr::ldply(inedges,as.data.frame)
names(inedges) <- c("to","from")
dfgraph <- igraph::as_data_frame(projgraph,what="edges")
dfgraph$to <- plyr::mapvalues(dfgraph$to,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfgraph$from <- plyr::mapvalues(dfgraph$from,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfoo <- igraph::graph_from_data_frame(dfgraph)
# Remove output files from graph
graph2 <- igraph::simplify(igraph::delete_vertices(dfoo,setdiff(igraph::V(dfoo)$name,vertexnames)))
lo <- igraph::layout.sugiyama(projgraph)
tp <- function(x){
x <- x[,2:1]
x[,1] <- max(x[,1])- x[,1]
return(x)
}
longgraph <- NULL
isg <- graph2
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
# Sometimes No Edges can mess up graph layouts
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(igraph::graph.data.frame(data.frame(from=vertexnames[1],to=vertexnames[1])))
}
# Sometimes 1 Vertex can mess up graph layouts
if(length(vertexnames)==1){
dfo <- data.frame(v=vertexnames[1],x=0,y=0)
dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
}else{
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}
if(plotTF){graphics::plot(isg,vertex.label=basename(igraph::V(isg)$name),layout=dfo)}
return(list(subgraph=isg,layout=dfo))
}   # End subgraph
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
subGraph
igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
getDepSubgraph <- function(rscript,project.id=getProject(),plotTF=FALSE){
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
try({
fromTo <- igraph::ends(subGraph$subgraph,1:length(igraph::E(subGraph$subgraph)))
hotEdges <- which((fromTo[,1] %in% upStream)&(fromTo[,2] %in% upStream))
igraph::E(subGraph$subgraph)$color[hotEdges] <- "red"
})
if(plotTF){
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
}
return(upStream)
}
getDepSubgraph("read_data.R")
temp <- getDepSubgraph("read_data.R")
temp
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
fromTo <- igraph::ends(subGraph$subgraph,1:length(igraph::E(subGraph$subgraph)))
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
subGraph
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
subGraph$layout
#' Produces script only subgraph
#' @param project.id Project id
#' @param plotTF logical to plot subgraph
#' @details For use with getDepSubgraph
#' @return list with subgraph in igraph format, layout for plottingss
#' @export
#' @examples
#'\dontrun{
#'  subGraph <- scriptSubgraph(project.id=getProject())
#'  plot(subGraph[[1]],vertex.label=basename(V(subGraph[[1]])$name),layout=subGraph[[2]])
#'}
#'
scriptSubgraph <- function(project.id=getProject(),plotTF=FALSE){
si <- pullSourceInfo(project.id)
projinfo <- getProjectInfoSI(si)
projgraph <- projinfo$graph
sources <- unique(projinfo$tree$source.file)
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
# if(length(vertexnames)==1){stop("scriptSubgraph: Only 1 R script")}
# Get all script output files
inedges <- igraph::adjacent_vertices(projgraph, vertexnames,"out")
inedges <- lapply(inedges,function(x){return(attr(x,"name"))})
inedges <- plyr::ldply(inedges,as.data.frame)
names(inedges) <- c("to","from")
dfgraph <- igraph::as_data_frame(projgraph,what="edges")
dfgraph$to <- plyr::mapvalues(dfgraph$to,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfgraph$from <- plyr::mapvalues(dfgraph$from,as.character(inedges$from),as.character(inedges$to),warn_missing = FALSE)
dfoo <- igraph::graph_from_data_frame(dfgraph)
# Remove output files from graph
graph2 <- igraph::simplify(igraph::delete_vertices(dfoo,setdiff(igraph::V(dfoo)$name,vertexnames)))
lo <- igraph::layout.sugiyama(projgraph)
tp <- function(x){
x <- x[,2:1]
x[,1] <- max(x[,1])- x[,1]
return(x)
}
longgraph <- NULL
isg <- graph2
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
# Sometimes No Edges can mess up graph layouts
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(igraph::graph.data.frame(data.frame(from=vertexnames[1],to=vertexnames[1])))
}
# Sometimes 1 Vertex can mess up graph layouts
if(length(vertexnames)==1){
dfo <- data.frame(v=vertexnames[1],x=0,y=0)
dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}else{
dfo <- tp(igraph::layout.sugiyama(isg)$layout)
}
if(plotTF){graphics::plot(isg,vertex.label=basename(igraph::V(isg)$name),layout=dfo)}
return(list(subgraph=isg,layout=dfo))
}   # End subgraph
scriptSubgraph(project.id,plotTF=FALSE)
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
graphics::plot(subGraph$subgraph,vertex.label=basename(igraph::V(subGraph$subgraph)$name),
layout=subGraph$layout,main=paste("Partial Synch for",rscript,"in",project.id,"project"))
makeScript("test.R")
graphProject()
scriptSubgraph(plotTF = 1)
getDepSubgraph("test.R")
getDepSubgraph("test.R",1)
getDepSubgraph("test.R",plotTF = 1)
subGraph <- scriptSubgraph(project.id,plotTF=FALSE)
endVertex <- igraph::V(subGraph$subgraph)$name[basename(igraph::V(subGraph$subgraph)$name)==rscript]
upStream <- unique(getUpstream(endVertex,subGraph$subgraph))
igraph::V(subGraph$subgraph)$color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"red","azure3")
igraph::V(subGraph$subgraph)$label.color <- ifelse(igraph::V(subGraph$subgraph)$name %in% upStream,"black","blue")
igraph::E(subGraph$subgraph)$color <- "azure2"
igraph::E(subGraph$subgraph)$arrow.size <- 0.25
igraph::E(subGraph$subgraph)
length(igraph::E(subGraph$subgraph)$arrow.size)
getDepSubgraph("read_data.R")
source('~/Documents/Projects/adapr/R/scriptSubgraph.R')
getDepSubgraph("read_data.R")
getDepSubgraph("read_data.R",plotTF = 1)
require("knitr")
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
setwd(file.path(getAdaprOptions()$project.path,"adaprTest"))
testFiles <- list.files(file.path(getAdaprOptions()$project.path,"adaprTest"),recursive=TRUE,all.files=FALSE)
zip("adaprTest.zip",files=testFiles)
library(adapr)
? relocateProject
library(adapr)
library(adapr)
setProject
getLibrary
Library
getProjectLibrary()
getProjectLibrary
rversion <- gsub("\\.","_",paste0(R.Version()$major,"_",R.Version()$minor))
rversion
setProject
library(adapr)
shiny::runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
adapr::get_orchard()
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
input$project.id <- "adaprTest"
input<-list(project.id="adaprTest")
syncer <- sourceSyncSILoad(source_info)
run.times <- syncer$run.times
ID.sync.out <- syncer$ID.sync.out
sync.out <- syncer$sync.out
wait0<-ceiling(as.numeric(sum( run.times$last.run.time.sec))*1.5)
#progress <- shiny::Progress$new()
#on.exit(progress$close())
n.scripts.to.sync <- nrow(ID.sync.out)
startmessage <- paste("Start sync approximate Time:", wait0, "seconds",n.scripts.to.sync,"scripts")
withProgress(message=startmessage, expr={
#        progress$set(message=paste("Start sync",startmessage),value=0)
Sys.sleep(3)
full.time <- wait0
last.prog <- "Go"
source.iter <- 0
while((last.prog != "") & source.iter < nrow(ID.sync.out)){
source.iter <- source.iter + 1
#for (source.iter in 1:nrow(ID.sync.out)) {
runmessage <- paste(ID.sync.out$file[source.iter],paste0(source.iter,"/",n.scripts.to.sync),wait0,"seconds remaining")
incProgress(source.iter/nrow(ID.sync.out),message=runmessage)
# progress$set(message=paste("Start sync",startmessage),value=0)
last.prog <- ""
try({
clean_source(file.path(ID.sync.out$path[source.iter],ID.sync.out$file[source.iter]))
#run.program(input$project.id,ID.sync.out$file[source.iter],TRUE)
#Sys.sleep(3)
last.prog <- ID.sync.out$file[source.iter]
}
print(wait0)
print(run.times$last.run.time.sec[source.iter] )
wait0 <- wait0 - run.times$last.run.time.sec[source.iter]
}
text<-paste("Waiting to synchronize",input$project.id)
source_info <- pullSourceInfo(input$project.id)
test.sync0 <- syncTestSI(source_info)
if(test.sync0$synchronize){
text <- paste(input$project.id,"Already synchonized")
}else{
syncer <- sourceSyncSILoad(source_info)
run.times <- syncer$run.times
ID.sync.out <- syncer$ID.sync.out
sync.out <- syncer$sync.out
wait0<-ceiling(as.numeric(sum( run.times$last.run.time.sec))*1.5)
#progress <- shiny::Progress$new()
#on.exit(progress$close())
n.scripts.to.sync <- nrow(ID.sync.out)
startmessage <- paste("Start sync approximate Time:", wait0, "seconds",n.scripts.to.sync,"scripts")
withProgress(message=startmessage, expr={
#        progress$set(message=paste("Start sync",startmessage),value=0)
Sys.sleep(3)
full.time <- wait0
last.prog <- "Go"
source.iter <- 0
text<-paste("Waiting to synchronize",input$project.id)
source_info <- pullSourceInfo(input$project.id)
test.sync0 <- syncTestSI(source_info)
syncer <- sourceSyncSILoad(source_info)
run.times <- syncer$run.times
ID.sync.out <- syncer$ID.sync.out
sync.out <- syncer$sync.out
wait0<-ceiling(as.numeric(sum( run.times$last.run.time.sec))*1.5)
#progress <- shiny::Progress$new()
#on.exit(progress$close())
n.scripts.to.sync <- nrow(ID.sync.out)
startmessage <- paste("Start sync approximate Time:", wait0, "seconds",n.scripts.to.sync,"scripts")
withProgress(message=startmessage, expr={
#        progress$set(message=paste("Start sync",startmessage),value=0)
Sys.sleep(3)
full.time <- wait0
last.prog <- "Go"
source.iter <- 0
syncer <- sourceSyncSILoad(source_info)
run.times <- syncer$run.times
ID.sync.out <- syncer$ID.sync.out
sync.out <- syncer$sync.out
wait0<-ceiling(as.numeric(sum( run.times$last.run.time.sec))*1.5)
#progress <- shiny::Progress$new()
#on.exit(progress$close())
n.scripts.to.sync <- nrow(ID.sync.out)
startmessage <- paste("Start sync approximate Time:", wait0, "seconds",n.scripts.to.sync,"scripts")
withProgress(message=startmessage, expr={
#        progress$set(message=paste("Start sync",startmessage),value=0)
Sys.sleep(3)
full.time <- wait0
last.prog <- "Go"
source.iter <- 0
syncer <- sourceSyncSILoad(source_info)
run.times <- syncer$run.times
ID.sync.out <- syncer$ID.sync.out
sync.out <- syncer$sync.out
wait0<-ceiling(as.numeric(sum( run.times$last.run.time.sec))*1.5)
wait0
n.scripts.to.sync <- nrow(ID.sync.out)
startmessage <- paste("Start sync approximate Time:", wait0, "seconds",n.scripts.to.sync,"scripts")
#        progress$set(message=paste("Start sync",startmessage),value=0)
Sys.sleep(3)
full.time <- wait0
last.prog <- "Go"
source.iter <- 0
while((last.prog != "") & source.iter < nrow(ID.sync.out)){
source.iter <- source.iter + 1
#for (source.iter in 1:nrow(ID.sync.out)) {
runmessage <- paste(ID.sync.out$file[source.iter],paste0(source.iter,"/",n.scripts.to.sync),wait0,"seconds remaining")
incProgress(source.iter/nrow(ID.sync.out),message=runmessage)
# progress$set(message=paste("Start sync",startmessage),value=0)
last.prog <- ""
try({
clean_source(file.path(ID.sync.out$path[source.iter],ID.sync.out$file[source.iter]))
#run.program(input$project.id,ID.sync.out$file[source.iter],TRUE)
#Sys.sleep(3)
last.prog <- ID.sync.out$file[source.iter]
})
print(wait0)
print(run.times$last.run.time.sec[source.iter] )
wait0 <- wait0 - run.times$last.run.time.sec[source.iter]
}
last.prog
source.iter
nrow(ID.sync.out)
syncer
run.times <- syncer$run.times
ID.sync.out <- syncer$ID.sync.out
sync.out <- syncer$sync.out
ID.sync.out
syncer$ID.sync.out
syncer$
names(syncer)
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
setAdaprOptions("git","TRUE")
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
runApp('/Volumes/WORKING2/Projects/Goros/Gelfond_369/adapr22')
library(adapr)
source('~/Documents/Projects/adapr/R/adaprSheet.R')
adaprSheet()
source('~/Documents/Projects/adapr/R/adaprSheet.R')
adaprSheet()
system.file('cheatsheet_adapr.pdf',package='adapr')
library(adapr)
system.file('cheatsheet_adapr.pdf',package='adapr')
adaprSheet()
library(adapr)
plantOrchard
plant.tree
library(adapr)
initProject
plantTree
adapr::plantTree
library(adapr)
source('~/Documents/Projects/adapr/R/plant_tree.R')
plantTree()
plantTree
library(adapr)
library(adapr)
ls()
rm(list=ls())
library(adapr)
gitConfigureTest()
gitConfigureTest
gitConfigure
gitConfigure()
gitConfigure()
gitConfigureTest()
? gitConfigureTest
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("git","TRUE")
setAdaprOptions("git","TRsdf")
setAdaprOptions("git","FALSE")
setAdaprOptions("git","TRUE")
git2r::config(global=TRUE)
source('~/Documents/Projects/adapr/R/git_config_test.R')
gitConfigureTest()
source('~/Documents/Projects/adapr/R/git_config_test.R')
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
setAdaprOptions("git","FALSE")
setAdaprOptions("git","TRUE")
source('~/Documents/Projects/adapr/R/updateAdaprConfig.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/guess_write_fnc.R')
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/guess_write_fnc.R')
ls()
library(adapr)
library(adapr)
library(adapr)
??is.installed
is.installed
install.packages()
?install.packages
library(adapr)
?install_github
source('~/Documents/Projects/adapr/R/adaprInstall.R')
adaprInstall(betaTF = 1)
source('~/Documents/Projects/adapr/R/adaprInstall.R')
adaprInstall(betaTF = 1)
adaprInstall(betaTF = 1)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/run_Program.R')
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/run_Program.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
checkVersion("adapr")
checkVersion("adapr",version0="2.0.0")
checkVersion("adapr",version0="2.0.1")
checkVersion("adapr",version0="adsfasdf")
checkVersion("adapsdfafr",version0="adsfasdf")
gsub("\\-","\\.","2.0.0")
gsub("\\-","\\.","2-0-0")
checkVersion("adapr",version0="adsfasdf",versionCheck = TRUE)
checkVersion("adapr",version0="2.0.0",versionCheck = TRUE)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? install_github
? devtools::install_github
source('~/Documents/Projects/adapr/R/adaprInstall.R')
library(adapr)
relocateProject()
relocateProject
setProject()
setProject
getProjectLibrary
library(adapr)
library(adapr)
setProject
source('~/Documents/Projects/adapr/R/get_project_path.R')
library(adapr)
library(adapr)
plantTree
library(adapr)
plantTree
relocateProject()
setProject
getProjectLibrary
library(adapr)
initProject("testdsafjkl",project.libraryTF = 1)
showProject()
getProjectLibrary()
.libPaths()
adaprInstall(betaTF=TRUE)
setAdaprOptions("adaprBeta","TRUE")
removeProject(""testdsafjkl"")
removeProject(""testdsafjkl"")
removeProject("testdsafjkl")
initProject("testdsafjkl",project.libraryTF = 1)
getProjectLibrary()
initProject("testdsafjkl",project.libraryTF = 1)
library(adapr)
removeProject("testdsafjkl")
initProject("testdsafjkl",project.libraryTF = 1)
removeProject("testdsafjkl")
initProject("initLibTest",project.libraryTF = 1)
getAdaprOptions()
.libPaths("/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
