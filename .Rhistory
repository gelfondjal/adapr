# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
#project.graph <- get.project.info.si(source_info)$graph
showResults()
df <- data.frame(x=rnorm(102),y=rnorm(102))
xy <- ggplot(df,aes(x,y))+geom_point()
library(ggplot2)
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
df <- data.frame(x=rnorm(102),y=rnorm(102))
xy <- ggplot(df,aes(x,y))+geom_point()
saveToLocalRepo(pl, repoDir = repo)
archivist::saveToLocalRepo(pl, repoDir = repo)
archivist::saveToLocalRepo(pl)
archivist::saveToLocalRepo(pl,file.path(resultsDir(),"archivist"))
archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"))
warnings()
makeScript("testArchivist.R")
showProject()
rm(list=ls())
set.seed( 2011 )
library("adapr")
source.file <-"testArchivist.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="")
#Library statements here
library(archivist)
# Program body here
rm(list=ls())
set.seed( 2011 )
library("adapr")
source.file <-"testArchivist.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="")
#Library statements here
library(archivist)
# Program body here
resultsDir
loadFromLocalRepo(file.path(getProjectPath(),"Results","read_data.R","archivist"))
? saveToLocalRepo
? saveToLocalRepo
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
? loadFromLocalRepo
? aread
? asearch
asearch(repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
asearch("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
exists(file.path(getProjectPath(),"Results","read_data.R","archivist"))
dir.exists(file.path(getProjectPath(),"Results","read_data.R","archivist"))
asearch("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
asearch("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
? asearch
? searchInLocalRepo
searchInLocalRepo("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
searchInLocalRepo("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
searchInLocalRepo("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
archivist::createLocalRepo()
?archivist::createLocalRepo
searchInLocalRepo("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
showProject()
searchInLocalRepo("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
loader <- searchInLocalRepo("source:read_data.R",repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
loader <- searchInLocalRepo(c("source:read_data.R","aName:scatter"),repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
loader
loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
tempObj <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
print(tempObj)
print(get(tempObj))
ls()
? loadFromLocalRepo
tempObj <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results","read_data.R","archivist"),value=TRUE)
print((tempObj))
" Open script"
library(adapr)
adapr::install()
adapr::install
source('~/Documents/Projects/adapr/R/load_branch.R')
processed <- AppLoadFlex(adaprHome,"Results/read_data.R","Session_info_read_data_R.RObj")
processed <- AppLoadFlex("adaprHome","Results/read_data.R","Session_info_read_data_R.RObj")
AppLoadFlex("adaprTest","Results/read_data.R","cardata.RData")
source('~/Documents/Projects/adapr/R/load_branch.R')
AppLoadFlex("adaprTest","Results/read_data.R","cardata.RData")
processed <- AppLoadFlex("adaprHome","Results/read_data.R","Session_info_read_data_R.RObj")
processed <- AppLoadFlex("adaprTest","Results/read_data.R","Session_info_read_data_R.RObj")
getLibrary
library(adapr)
archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
rm(list=ls())
set.seed( 23011 )
library(adapr)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
df <- data.frame(x=rnorm(102),y=rnorm(102))
xy <- ggplot(df,aes(x,y))+geom_point()
archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
rm(list=ls())
set.seed( 23011 )
library(adapr)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
source('~/Documents/Projects/adapr/R/create_source_file_dir.R')
set.seed( 23011 )
library(adapr)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
df <- data.frame(x=rnorm(102),y=rnorm(102))
xy <- ggplot(df,aes(x,y))+geom_point()
temp <- archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
Write(source_info$)
warning()
warnings()
set.seed( 23011 )
library(adapr)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
df <- data.frame(x=rnorm(102),y=rnorm(102))
xy <- ggplot(df,aes(x,y))+geom_point()
temp <- archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
Write(source_info$)
warnings()
temp <- archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
temp
adapr::getSourceInfo()
adapr::getSourceInfo()$source.file$file
adapr::getSourceInfo()$source.file
adapr::getSourceInfo()$source
adapr::getSourceInfo()
adapr::getSourceInfo()$file$file
temp <- archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
temp <- archivist::saveToLocalRepo(xy,file.path(resultsDir(),"archivist"),userTags = c("source:read_data.R","aName:scatter"))
name(temp)
Robj <- xy
descriptin <- "ggplot"
hashfileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description))))
Robj <- xy
description <- "ggplot"
hashfileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description))))
hashfileName
?WriteTrack
showResults()
hashfileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description))))
WriteTrack(file.path(resultsDir(),"archivist","gallery",paste(hashFileName,".rda")))
hashFileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description))))
WriteTrack(file.path(resultsDir(),"archivist","gallery",paste(hashFileName,".rda")))
hashFileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description))))
WriteTrack(file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda")))
hashFileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description))))
WriteTrack(file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda")),description = paste("archivist",description))
fileName <- file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda")
fileName <- file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
fileName <- file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda"))
fileName
file.exists(fileName)
Robj <- xy
description <- "ggplot"
script <- "read_data.R"
project.id = getProject()
loader <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist"))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
objectOut
loader
hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist"))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda"))
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
aRead <- function(script="read_data.R",object.name="description",search="",project.id = getProject()){
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
ReadTrack(fileName,paste("archivist:",description))
return(objectOut)
}
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
aWrite <- function(Robj,description){
suppressWarnings(hashFileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description)))))
fileName <- file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
WriteTrack(filename,description = paste("archivist",description))
}
aWrite(xy,"xyplot")
aWrite <- function(Robj,description){
suppressWarnings(hashFileName <-archivist::saveToLocalRepo(Robj,file.path(resultsDir(),"archivist"),userTags = c(paste0("source:",getSourceInfo()$file$file
,paste0("aName:",description)))))
fileName <- file.path(resultsDir(),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
WriteTrack(fileName,description = paste("archivist",description))
}
aWrite(xy,"xyplot")
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
aWrite(xy,"xyplot")
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
rm(list=ls())
set.seed( 2011 )
library("adapr")
source.file <-"testArchivist.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="")
#Library statements here
library(archivist)
listBranches()
aRead <- function(script="read_data.R",object.name="description",search="",project.id = getProject()){
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
ReadTrack(fileName,paste("archivist:",description))
return(objectOut)
}
aRead("read_data.R","xyplot")
aRead <- function(script="read_data.R",description="description",search="",project.id = getProject()){
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
ReadTrack(fileName,paste("archivist:",description))
return(objectOut)
}
aRead("read_data.R","xyplot")
description="description"
script="read_data.R"
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
rm(list=ls())
set.seed( 2011 )
library("adapr")
source.file <-"testArchivist.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="")
#Library statements here
library(archivist)
project.id
getProject()
project.id = getProject()
script="read_data.R"
description="description"
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
objectOut <- loadFromLocalRepo(hashFileName,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
hashFileName
hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist"))
hashFileName
file.path(getProjectPath(project.id),"Results",script,"archivist"))
file.path(getProjectPath(project.id),"Results",script,"archivist")
earchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist"))
searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist"))
script
objectOut <- loadFromLocalRepo(hashFileName,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
fileName <- file.path(getProjectPath(project.id),"Results",script,"archivist","gallery",paste0(hashFileName,".rda"))
fileName
file.exists(fileName)
description="xyplot"
hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist"))
hashFileName
aRead <- function(script="read_data.R",description="xyplot",search="",project.id = getProject()){
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(hashFileName,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"Results",script,"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
ReadTrack(fileName,paste("archivist:",description))
return(objectOut)
}
aRead("read_data.R","xyplot")
ReadTrack
fileName <- file.path(getProjectPath(project.id),"Results",script,"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
loadFlex
Read
options()$adaprScriptInfo$dependency$update(df.update)
?Read.cap
source('~/Documents/Projects/adapr/R/load_branch.R')
source('~/Documents/Projects/adaprHome/Programs/testArchivist.R')
source('~/Documents/Projects/adaprHome/Programs/testArchivist.R')
dependency.out
source('~/Documents/Projects/adaprHome/Programs/testArchivist.R')
rm(list=ls())
set.seed( 2011 )
library("adapr")
source.file <-"testArchivist.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="")
#Library statements here
library(archivist)
# Program body here
#loader <- searchInLocalRepo(c("source:read_data.R","aName:scatter"),repo=file.path(getProjectPath(),"Results","read_data.R","archivist"))
#tempObj <- loadFromLocalRepo(loader,repo=file.path(getProjectPath(),"Results","read_data.R","archivist"),value=TRUE)
#print((tempObj))
aRead <- function(script="read_data.R",description="xyplot",project.id = getProject()){
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(hashFileName,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"Results",script,"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
df.update <- data.frame(target.file=basename(fileName),
target.path=dirname(fileName),
target.description=search,
dependency="in",stringsAsFactors=FALSE)
options()$adaprScriptInfo$dependency$update(df.update)
return(objectOut)
}
aRead("read_data.R","xyplot")
script="read_data.R"
description="xyplot"
project.id = getProject()
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",script,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",script,"archivist")))
objectOut <- loadFromLocalRepo(hashFileName,repo=file.path(getProjectPath(),"Results",script,"archivist"),value=TRUE)
fileName <- file.path(getProjectPath(project.id),"Results",script,"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
df.update <- data.frame(target.file=basename(fileName),
target.path=dirname(fileName),
target.description=search,
dependency="in",stringsAsFactors=FALSE)
source('~/Documents/Projects/adaprHome/Programs/testArchivist.R')
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
dependency.out()
dependency.out
? get
temp <- function(x=x,y=mget(x)){print(y)}
temp(2)
listBranches()
listBranches <- function(project.id=getProject()){
file_data <- list(file=NULL)
si <- pullSourceInfo(project.id)
dependency.dir <- si$dependency.dir
# Search for branches (intermediate results loaded by other R scripts)
try({
treedf <- readDependency(dependency.dir)
not.this.source <- subset(treedf,(!is.na(dependency)))
file_data$file<- condenseFileInfo(not.this.source)
},silent=TRUE)
if(length(file_data$file)==0){
print("No available branch files")
return(NULL)
}
file_sub  <- subset(file_data$file,grepl("(rda$)|(rdata$)",tolower(file_data$file$file)),select = c("file","path","description"))
if(length(file_sub$file)==0){
print("No available branches")
return(NULL)
}
file_sub$path <- gsub(file.path(getProjectPath(),"Results/"),"",file_sub$path)
return(file_sub)
}
listBranches()
source('~/Documents/Projects/adapr/R/aWrite.R')
source('~/Documents/Projects/adaprHome/Programs/testArchivist.R')
source('~/Documents/Projects/adapr/R/aWrite.R')
arcRead("read_data.R","xyplot")
source('~/Documents/Projects/adaprHome/Programs/testArchivist.R')
arcRead <- function(rscript="read_data.R",description="xyplot",project.id = getProject()){
suppressWarnings(hashFileName <- searchInLocalRepo(paste0("source:",rscript,
paste0("aName:",description)),
repo=file.path(getProjectPath(project.id),"Results",rscript,"archivist")))
objectOut <- loadFromLocalRepo(hashFileName,repo=file.path(getProjectPath(),"Results",rscript,"archivist"),value=FALSE)
fileName <- file.path(getProjectPath(project.id),"Results",rscript,"archivist","gallery",paste0(hashFileName,".rda"))
file.exists(fileName)
df.update <- data.frame(target.file=basename(fileName),
target.path=dirname(fileName),
target.description=description,
dependency="in",stringsAsFactors=FALSE)
options()$adaprScriptInfo$dependency$update(df.update)
return(objectOut)
}
arcRead("read_data.R","xyplot")
ls()
library(adapr)
library(adapr)
library(adapr)
getLibrary()
getProjectLibrary()
listProjects(allInfo = 0)
source('~/Documents/Projects/adapr/R/get.orchard.R')
listProjects(project.id0 = "Weiner_SNP")
library(adapr)
library(adapr)
getAdaprOptions()$author
getAdaprOptions()$user
getAdaprOptions()
project.directory.tree$analysis
project.directory.tree$support
debugSource('~/Documents/Projects/adapr/R/makeFunction.R')
source('~/Documents/Projects/adapr/R/makeFunction.R')
source('~/Documents/Projects/adapr/R/makeFunction.R')
getProject()
makeFunction("identity2","really like identity")
showProject()
source('~/Documents/Projects/adapr/R/makeFunction.R')
showProject()
source('~/Documents/Projects/adapr/R/makeFunction.R')
showProject()
makeFunction("identity2","really like identity")
source('~/Documents/Projects/adapr/R/makeFunction.R')
makeFunction("identity2","really like identity")
source('~/Documents/Projects/adapr/R/makeFunction.R')
source('~/Documents/Projects/adapr/R/makeFunction.R')
makeFunction("identity2","really like identity")
source('~/Documents/Projects/adapr/R/makeFunction.R')
makeFunction("identity2","really like identity")
makeFunction("identity2","really like identity")
? arcWrite
? arcRead
adaprSheet()
adaprSheet()
?installProjectPackages
adaprApp()
getPubResults()
browsePubFiles
gitConfigure()
gitConfigureTest()
getAdaprOptions()
getAdaprOptions
``````
adaprHomeDir()
adaprHomeDir
library(adapr)
adaprSheet()
install.packages("ggplot2","epitools","oddratios","binom")
install.packages("ggplot2", "epitools", "oddratios", "binom")
install.packages("ggplot2", "epitools", "oddratios", "binom")
install.packages("ggplot2", "epitools", "oddratios", "binom")
source('~/Documents/Projects/adapr/R/setProject.R')
ls()
setProject()
library(adapr)
setProject()
source('~/Documents/Projects/adapr/R/setProject.R')
setProject()
setProject()
source('~/Documents/Projects/adapr/R/setProject.R')
setProject()
setProject()
setProject()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? arcRead
library(adapr)
library(adapr)
library(adapr)
makeFunction()
showProject()
library(adapr)
makeFunction()
makeFunction
library(adapr)
library(adapr)
library(adapr)
makeFunction()
load_all()
library(devtools)
load_all()
library(adapr)
makeFunction
